[
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/40/01-21:07:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593657612.669001,
        "date_readable": "Jul 01, 2020",
        "date_sortable": "2020/40/01",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            tdb.import_docs_from_csv(dataset_path)\n            return tdb.count_docs()\n",
        "time_elapsed": 1144.8063321113586,
        "count_iterations": 1,
        "count_operations": 45941,
        "msecs_per_operation": 24.919055573700152,
        "operations_per_second": 40.12993177219008
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/15/01-22:07:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593659714.332032,
        "date_readable": "Jul 01, 2020",
        "date_sortable": "2020/15/01",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            tdb.import_docs_from_csv(dataset_path)\n            return tdb.count_docs()\n",
        "time_elapsed": 2100.964653968811,
        "count_iterations": 1,
        "count_operations": 45941,
        "msecs_per_operation": 45.731800656685984,
        "operations_per_second": 21.86662203631818
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/22/02-00:07:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593667334.772017,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/22/02",
        "benchmark_name": "Random Reads: Retreive Doc by ID",
        "benchmark_code": "    def find_with_id(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for doc_id in self.tasks.doc_ids_to_query:\n            match = self.tdb.find_with_id(doc_id)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} ID matches')\n        return cnt\n",
        "time_elapsed": 1.1415600776672363,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 1.1415600776672363,
        "operations_per_second": 875.99419387851
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/23/02-00:07:23",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593667403.326251,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/23/02",
        "benchmark_name": "Random Reads: Find Docs with Substring",
        "benchmark_code": "    def find_with_substring(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for word in self.tasks.words_to_search:\n            doc_ids = self.tdb.find_with_substring(word)\n            cnt += 1\n            cnt_found += len(doc_ids)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} matches found')\n        return cnt\n",
        "time_elapsed": 68.54932308197021,
        "count_iterations": 1,
        "count_operations": 9,
        "msecs_per_operation": 7616.591453552246,
        "operations_per_second": 0.13129232493277782
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/43/02-00:07:45",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668625.236304,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/43/02",
        "benchmark_name": "Random Reads: Lookup Doc by ID",
        "benchmark_code": "    def find_with_id(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for doc_id in self.tasks.doc_ids_to_query:\n            match = self.tdb.find_with_id(doc_id)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} ID matches')\n        return cnt\n",
        "time_elapsed": 0.3770601749420166,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 0.3770601749420166,
        "operations_per_second": 2652.0965788916255
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/44/02-00:07:24",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668664.773408,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/44/02",
        "benchmark_name": "Random Reads: Find All Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(None)\n",
        "time_elapsed": 39.53281092643738,
        "count_iterations": 1,
        "count_operations": 6,
        "msecs_per_operation": 6588.801821072896,
        "operations_per_second": 0.15177266324837854
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/45/02-00:07:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668700.743474,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/45/02",
        "benchmark_name": "Random Reads: Find 20 Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(20)\n",
        "time_elapsed": 35.969733238220215,
        "count_iterations": 1,
        "count_operations": 6,
        "msecs_per_operation": 5994.955539703369,
        "operations_per_second": 0.16680690847116442
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/45/02-00:07:39",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668739.974091,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/45/02",
        "benchmark_name": "Random Reads: Find All Docs with Bigram",
        "benchmark_code": "            func=lambda: self.find_with_phrase(None)\n",
        "time_elapsed": 39.2302930355072,
        "count_iterations": 1,
        "count_operations": 4,
        "msecs_per_operation": 9807.5732588768,
        "operations_per_second": 0.10196202196041752
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/46/02-00:07:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668776.691445,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/46/02",
        "benchmark_name": "Random Writes: Remove Doc",
        "benchmark_code": "    def remove_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.remove_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 36.7170307636261,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 36.7170307636261,
        "operations_per_second": 27.235317758609575
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/46/02-00:07:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668813.156067,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/46/02",
        "benchmark_name": "Random Writes: Upsert Doc",
        "benchmark_code": "    def upsert_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.upsert_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 36.464200019836426,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 36.464200019836426,
        "operations_per_second": 27.424158474778075
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/47/02-00:07:25",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668845.573053,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/47/02",
        "benchmark_name": "Random Writes: Remove Docs Batch",
        "benchmark_code": "    def remove_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.remove_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 32.4162380695343,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 32.4162380695343,
        "operations_per_second": 30.84873691558393
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/47/02-00:07:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668879.638752,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/47/02",
        "benchmark_name": "Random Writes: Upsert Docs Batch",
        "benchmark_code": "    def upsert_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.upsert_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 34.06503701210022,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 34.06503701210022,
        "operations_per_second": 29.355611727202604
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/48/02-00:07:02",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668882.223933,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/48/02",
        "benchmark_name": "Random Reads: Lookup Doc by ID",
        "benchmark_code": "    def find_with_id(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for doc_id in self.tasks.doc_ids_to_query:\n            match = self.tdb.find_with_id(doc_id)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} ID matches')\n        return cnt\n",
        "time_elapsed": 2.2322187423706055,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 2.2322187423706055,
        "operations_per_second": 447.9847700490163
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/48/02-00:07:10",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668890.607299,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/48/02",
        "benchmark_name": "Random Reads: Find All Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(None)\n",
        "time_elapsed": 8.382776021957397,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.8382776021957398,
        "operations_per_second": 1192.9222460204749
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/48/02-00:07:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668896.047241,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/48/02",
        "benchmark_name": "Random Reads: Find 20 Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(20)\n",
        "time_elapsed": 5.4396607875823975,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.5439660787582398,
        "operations_per_second": 1838.3499248386772
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/48/02-00:07:21",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668901.37756,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/48/02",
        "benchmark_name": "Random Reads: Find All Docs with Bigram",
        "benchmark_code": "            func=lambda: self.find_with_phrase(None)\n",
        "time_elapsed": 5.3299479484558105,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.532994794845581,
        "operations_per_second": 1876.190930325538
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/49/02-00:07:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668974.736407,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/49/02",
        "benchmark_name": "Random Writes: Remove Doc",
        "benchmark_code": "    def remove_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.remove_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 73.35856103897095,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 73.35856103897095,
        "operations_per_second": 13.631674147326319
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/50/02-00:07:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593669050.024886,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/50/02",
        "benchmark_name": "Random Writes: Upsert Doc",
        "benchmark_code": "    def upsert_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.upsert_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 75.28800702095032,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 75.28800702095032,
        "operations_per_second": 13.282327950608801
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/51/02-00:07:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593669088.532986,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/51/02",
        "benchmark_name": "Random Writes: Remove Docs Batch",
        "benchmark_code": "    def remove_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.remove_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 38.50703406333923,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 38.50703406333923,
        "operations_per_second": 25.96928130988031
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/52/02-00:07:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593669131.733731,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/52/02",
        "benchmark_name": "Random Writes: Upsert Docs Batch",
        "benchmark_code": "    def upsert_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.upsert_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 43.20023703575134,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 43.20023703575134,
        "operations_per_second": 23.148021136375412
    }
]