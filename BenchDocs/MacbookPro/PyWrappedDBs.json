[
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/43/03-05:07:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593772991.640093,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/43/03",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            tdb.import_docs_from_csv(dataset_path)\n            return tdb.count_docs()\n",
        "time_elapsed": 1069.0108189582825,
        "count_iterations": 1,
        "count_operations": 45941,
        "msecs_per_operation": 23.26921092179714,
        "operations_per_second": 42.97524326719917
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/13/03-00:07:25",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593753205.179202,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/13/03",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            tdb.import_docs_from_csv(dataset_path)\n            return tdb.count_docs()\n",
        "time_elapsed": 218.6222698688507,
        "count_iterations": 1,
        "count_operations": 45941,
        "msecs_per_operation": 4.758761669725315,
        "operations_per_second": 210.13870191522366
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/46/02-00:07:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668776.691445,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/46/02",
        "benchmark_name": "Random Writes: Remove Doc",
        "benchmark_code": "    def remove_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.remove_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 36.7170307636261,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 36.7170307636261,
        "operations_per_second": 27.235317758609575
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/46/02-00:07:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668813.156067,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/46/02",
        "benchmark_name": "Random Writes: Upsert Doc",
        "benchmark_code": "    def upsert_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.upsert_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 36.464200019836426,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 36.464200019836426,
        "operations_per_second": 27.424158474778075
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/47/02-00:07:25",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668845.573053,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/47/02",
        "benchmark_name": "Random Writes: Remove Docs Batch",
        "benchmark_code": "    def remove_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.remove_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 32.4162380695343,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 32.4162380695343,
        "operations_per_second": 30.84873691558393
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/47/02-00:07:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668879.638752,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/47/02",
        "benchmark_name": "Random Writes: Upsert Docs Batch",
        "benchmark_code": "    def upsert_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.upsert_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 34.06503701210022,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 34.06503701210022,
        "operations_per_second": 29.355611727202604
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/49/02-00:07:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593668974.736407,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/49/02",
        "benchmark_name": "Random Writes: Remove Doc",
        "benchmark_code": "    def remove_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.remove_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 73.35856103897095,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 73.35856103897095,
        "operations_per_second": 13.631674147326319
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/50/02-00:07:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593669050.024886,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/50/02",
        "benchmark_name": "Random Writes: Upsert Doc",
        "benchmark_code": "    def upsert_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.upsert_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 75.28800702095032,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 75.28800702095032,
        "operations_per_second": 13.282327950608801
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/51/02-00:07:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593669088.532986,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/51/02",
        "benchmark_name": "Random Writes: Remove Docs Batch",
        "benchmark_code": "    def remove_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.remove_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 38.50703406333923,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 38.50703406333923,
        "operations_per_second": 25.96928130988031
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/52/02-00:07:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593669131.733731,
        "date_readable": "Jul 02, 2020",
        "date_sortable": "2020/52/02",
        "benchmark_name": "Random Writes: Upsert Docs Batch",
        "benchmark_code": "    def upsert_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.upsert_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 43.20023703575134,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 43.20023703575134,
        "operations_per_second": 23.148021136375412
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/41/03-00:07:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593754891.756056,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/41/03",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            tdb.import_docs_from_csv(dataset_path)\n            return tdb.count_docs()\n",
        "time_elapsed": 1503.8602647781372,
        "count_iterations": 1,
        "count_operations": 9999442,
        "msecs_per_operation": 0.15039441848636526,
        "operations_per_second": 6649.1829288908075
    },
    {
        "database": "ElasticSearch",
        "dataset": "EnglishWikipedia",
        "date": "2020/27/03-03:07:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593764851.258688,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/27/03",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            tdb.import_docs_from_csv(dataset_path)\n            return tdb.count_docs()\n",
        "time_elapsed": 4252.689265012741,
        "count_iterations": 1,
        "count_operations": 4902648,
        "msecs_per_operation": 0.8674270037360915,
        "operations_per_second": 1152.8347580752086
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/03/03-07:07:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593777824.641256,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/03/03",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            tdb.import_docs_from_csv(dataset_path)\n            return tdb.count_docs()\n",
        "time_elapsed": 2994.1195430755615,
        "count_iterations": 1,
        "count_operations": 9999442,
        "msecs_per_operation": 0.2994286624269196,
        "operations_per_second": 3339.6936415332857
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/35/03-14:07:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593804915.628393,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/35/03",
        "benchmark_name": "Random Reads: Lookup Doc by ID",
        "benchmark_code": "    def find_with_id(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for doc_id in self.tasks.doc_ids_to_query:\n            match = self.tdb.find_with_id(doc_id)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} ID matches')\n        return cnt\n",
        "time_elapsed": 1.766381025314331,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 1.766381025314331,
        "operations_per_second": 566.1292697718195
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/35/03-14:07:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593804943.37625,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/35/03",
        "benchmark_name": "Random Reads: Find All Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=None)\n",
        "time_elapsed": 27.743752002716064,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.7743752002716064,
        "operations_per_second": 360.4415148686817
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/36/03-14:07:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593804969.601827,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/36/03",
        "benchmark_name": "Random Reads: Find 20 Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=20)\n",
        "time_elapsed": 26.225226879119873,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.6225226879119874,
        "operations_per_second": 381.3122397793953
    },
    {
        "database": "ElasticSearch",
        "dataset": "Covid19",
        "date": "2020/36/03-14:07:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593804976.670371,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/36/03",
        "benchmark_name": "Random Reads: Find All Docs with Bigram",
        "benchmark_code": "            func=lambda: self.find_with_phrase(max_matches=None)\n",
        "time_elapsed": 7.06826376914978,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.706826376914978,
        "operations_per_second": 1414.7745933939402
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/36/03-14:07:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593804980.814871,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/36/03",
        "benchmark_name": "Random Reads: Lookup Doc by ID",
        "benchmark_code": "    def find_with_id(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for doc_id in self.tasks.doc_ids_to_query:\n            match = self.tdb.find_with_id(doc_id)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} ID matches')\n        return cnt\n",
        "time_elapsed": 0.3697628974914551,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 0.3697628974914551,
        "operations_per_second": 2704.435752705852
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/36/03-14:07:55",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805015.71663,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/36/03",
        "benchmark_name": "Random Reads: Find All Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=None)\n",
        "time_elapsed": 34.900882959365845,
        "count_iterations": 1,
        "count_operations": 8,
        "msecs_per_operation": 4362.610369920731,
        "operations_per_second": 0.2292205618211489
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/37/03-14:07:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805050.753494,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/37/03",
        "benchmark_name": "Random Reads: Find 20 Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=20)\n",
        "time_elapsed": 35.03654599189758,
        "count_iterations": 1,
        "count_operations": 96,
        "msecs_per_operation": 364.96402074893314,
        "operations_per_second": 2.73999611783081
    },
    {
        "database": "MongoDB",
        "dataset": "Covid19",
        "date": "2020/38/03-14:07:04",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805084.926274,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/38/03",
        "benchmark_name": "Random Reads: Find All Docs with Bigram",
        "benchmark_code": "            func=lambda: self.find_with_phrase(max_matches=None)\n",
        "time_elapsed": 34.172433853149414,
        "count_iterations": 1,
        "count_operations": 4,
        "msecs_per_operation": 8543.108463287354,
        "operations_per_second": 0.11705341261876055
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/44/03-14:07:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805468.792428,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/44/03",
        "benchmark_name": "Random Reads: Lookup Doc by ID",
        "benchmark_code": "    def find_with_id(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for doc_id in self.tasks.doc_ids_to_query:\n            match = self.tdb.find_with_id(doc_id)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} ID matches')\n        return cnt\n",
        "time_elapsed": 1.5860369205474854,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 1.5860369205474854,
        "operations_per_second": 630.5023464742607
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/44/03-14:07:58",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805498.802323,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/44/03",
        "benchmark_name": "Random Reads: Find All Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=None)\n",
        "time_elapsed": 30.005352020263672,
        "count_iterations": 1,
        "count_operations": 9799,
        "msecs_per_operation": 3.0620830717689227,
        "operations_per_second": 326.57507211988013
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/45/03-14:07:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805528.80583,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/45/03",
        "benchmark_name": "Random Reads: Find 20 Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=20)\n",
        "time_elapsed": 30.003196239471436,
        "count_iterations": 1,
        "count_operations": 9124,
        "msecs_per_operation": 3.288381876312082,
        "operations_per_second": 304.10093401971284
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/45/03-14:07:35",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805535.118085,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/45/03",
        "benchmark_name": "Random Reads: Find All Docs with Bigram",
        "benchmark_code": "            func=lambda: self.find_with_phrase(max_matches=None)\n",
        "time_elapsed": 6.311893939971924,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.6311893939971924,
        "operations_per_second": 1584.3105247177966
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/46/03-14:07:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805614.068237,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/46/03",
        "benchmark_name": "Random Writes: Remove Doc",
        "benchmark_code": "    def remove_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.remove_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 78.94979882240295,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 78.94979882240295,
        "operations_per_second": 12.66627673427634
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/48/03-14:07:04",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805684.697224,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/48/03",
        "benchmark_name": "Random Writes: Upsert Doc",
        "benchmark_code": "    def upsert_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.upsert_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 70.6284339427948,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 70.6284339427948,
        "operations_per_second": 14.158603612957718
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/48/03-14:07:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805733.286501,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/48/03",
        "benchmark_name": "Random Writes: Remove Docs Batch",
        "benchmark_code": "    def remove_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.remove_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 48.58884811401367,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 48.58884811401367,
        "operations_per_second": 20.580854225099166
    },
    {
        "database": "ElasticSearch",
        "dataset": "PoliticalTweets",
        "date": "2020/49/03-14:07:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805781.171001,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/49/03",
        "benchmark_name": "Random Writes: Upsert Docs Batch",
        "benchmark_code": "    def upsert_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.upsert_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 47.88271689414978,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 47.88271689414978,
        "operations_per_second": 20.884362142829414
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/49/03-14:07:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805791.271976,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/49/03",
        "benchmark_name": "Random Reads: Lookup Doc by ID",
        "benchmark_code": "    def find_with_id(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for doc_id in self.tasks.doc_ids_to_query:\n            match = self.tdb.find_with_id(doc_id)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} ID matches')\n        return cnt\n",
        "time_elapsed": 2.966614007949829,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 2.966614007949829,
        "operations_per_second": 337.08463498123945
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/51/03-14:07:22",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805882.579233,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/51/03",
        "benchmark_name": "Random Reads: Find All Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=10000)\n",
        "time_elapsed": 91.30652713775635,
        "count_iterations": 1,
        "count_operations": 19,
        "msecs_per_operation": 4805.60669146086,
        "operations_per_second": 0.20809027126104845
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/51/03-14:07:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805913.339315,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/51/03",
        "benchmark_name": "Random Reads: Find 20 Docs with Substring",
        "benchmark_code": "            func=lambda: self.find_with_substring(max_matches=20)\n",
        "time_elapsed": 30.759459733963013,
        "count_iterations": 1,
        "count_operations": 5337,
        "msecs_per_operation": 5.76343633763594,
        "operations_per_second": 173.50759883819282
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/52/03-14:07:47",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805967.72093,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/52/03",
        "benchmark_name": "Random Reads: Find All Docs with Bigram",
        "benchmark_code": "            func=lambda: self.find_with_phrase(max_matches=10000)\n",
        "time_elapsed": 54.3812689781189,
        "count_iterations": 1,
        "count_operations": 3,
        "msecs_per_operation": 18127.089659372967,
        "operations_per_second": 0.05516605361318608
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/52/03-14:07:52",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805972.230996,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/52/03",
        "benchmark_name": "Random Writes: Remove Doc",
        "benchmark_code": "    def remove_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.remove_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 4.5096330642700195,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 4.5096330642700195,
        "operations_per_second": 221.7475315060631
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/52/03-14:07:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805974.19436,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/52/03",
        "benchmark_name": "Random Writes: Upsert Doc",
        "benchmark_code": "    def upsert_doc(self) -> int:\n        cnt = 0\n        for doc in self.tasks.docs_to_change_by_one:\n            self.tdb.upsert_doc(doc)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 1.9628970623016357,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 1.9628970623016355,
        "operations_per_second": 509.4510655731632
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/52/03-14:07:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805974.759177,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/52/03",
        "benchmark_name": "Random Writes: Remove Docs Batch",
        "benchmark_code": "    def remove_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.remove_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 0.5640552043914795,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 0.5640552043914795,
        "operations_per_second": 1772.8761160511433
    },
    {
        "database": "MongoDB",
        "dataset": "PoliticalTweets",
        "date": "2020/52/03-14:07:55",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593805975.357704,
        "date_readable": "Jul 03, 2020",
        "date_sortable": "2020/52/03",
        "benchmark_name": "Random Writes: Upsert Docs Batch",
        "benchmark_code": "    def upsert_docs(self) -> int:\n        cnt = 0\n        for docs in self.tasks.docs_to_change_batched:\n            self.tdb.upsert_docs(docs)\n            cnt += len(docs)\n        return cnt\n",
        "time_elapsed": 0.5979809761047363,
        "count_iterations": 1,
        "count_operations": 1000,
        "msecs_per_operation": 0.5979809761047363,
        "operations_per_second": 1672.2940025852095
    }
]