[
    {
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_operations": 10000,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 18, 2020",
        "date_sortable": "2020/58/18",
        "date_utc": 1587200321.836754,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.008381199836730958,
        "num_cpus": 16,
        "operations_per_second": 119314.65893671433,
        "time_elapsed": 0.08381199836730957
    },
    {
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_operations": 2811717,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/40/19",
        "date_utc": 1587274802.048044,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.00187177973317064,
        "num_cpus": 16,
        "operations_per_second": 534250.8962345065,
        "time_elapsed": 5.2629148960113525
    },
    {
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_operations": 16518947,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 18, 2020",
        "date_sortable": "2020/29/18",
        "date_utc": 1587202153.159217,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.007368403504409739,
        "num_cpus": 16,
        "operations_per_second": 135714.6089246516,
        "time_elapsed": 121.71826696395874
    },
    {
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342708.247369,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.0478057861328125,
        "num_cpus": 16,
        "operations_per_second": 20917.96999680817,
        "time_elapsed": 0.02390289306640625
    },
    {
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342708.260949,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.02691650390625,
        "num_cpus": 16,
        "operations_per_second": 37151.92743764172,
        "time_elapsed": 0.013458251953125
    },
    {
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_operations": 435,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342708.2901,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.06681858808144757,
        "num_cpus": 16,
        "operations_per_second": 14965.895399960627,
        "time_elapsed": 0.029066085815429688
    },
    {
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_operations": 435,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342708.315828,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.05891953391590338,
        "num_cpus": 16,
        "operations_per_second": 16972.299906976743,
        "time_elapsed": 0.02562999725341797
    },
    {
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_operations": 435,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342708.345588,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.06799533449370285,
        "num_cpus": 16,
        "operations_per_second": 14706.891398447513,
        "time_elapsed": 0.029577970504760742
    },
    {
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_operations": 435,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342708.371004,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.05792639721399066,
        "num_cpus": 16,
        "operations_per_second": 17263.286655060176,
        "time_elapsed": 0.025197982788085938
    },
    {
        "benchmark_name": "Random Reads: Find Friends of Friends",
        "build_type": "debug",
        "count_operations": 272,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/06/19",
        "date_utc": 1587344767.366608,
        "device_name": "MacbookPro",
        "msecs_per_operation": 2.0330521990271175,
        "num_cpus": 16,
        "operations_per_second": 491.87128617678036,
        "time_elapsed": 0.552990198135376
    },
    {
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_operations": 2830,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/03/19",
        "date_utc": 1587344609.176172,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.035874919419575074,
        "num_cpus": 16,
        "operations_per_second": 27874.627070363596,
        "time_elapsed": 0.10152602195739746
    },
    {
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_operations": 2830,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/03/19",
        "date_utc": 1587344609.30255,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.04462184838608381,
        "num_cpus": 16,
        "operations_per_second": 22410.546316854714,
        "time_elapsed": 0.1262798309326172
    },
    {
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_operations": 2830,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/03/19",
        "date_utc": 1587344609.40883,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.037511667177449685,
        "num_cpus": 16,
        "operations_per_second": 26658.372587640002,
        "time_elapsed": 0.10615801811218262
    },
    {
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342708.945672,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.09242334365844726,
        "num_cpus": 16,
        "operations_per_second": 10819.777346462648,
        "time_elapsed": 0.46211671829223633
    },
    {
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342709.308688,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.07258400917053222,
        "num_cpus": 16,
        "operations_per_second": 13777.139227051426,
        "time_elapsed": 0.36292004585266113
    },
    {
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342709.370735,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.012387847900390624,
        "num_cpus": 16,
        "operations_per_second": 80724.27172507237,
        "time_elapsed": 0.061939239501953125
    },
    {
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "CommunitiesFB",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342709.434039,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.012638616561889648,
        "num_cpus": 16,
        "operations_per_second": 79122.58395554063,
        "time_elapsed": 0.06319308280944824
    },
    {
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342717.516572,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.6623497009277344,
        "num_cpus": 16,
        "operations_per_second": 1509.7764800064504,
        "time_elapsed": 0.3311748504638672
    },
    {
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/31/19",
        "date_utc": 1587342717.554869,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.07629013061523438,
        "num_cpus": 16,
        "operations_per_second": 13107.85539276964,
        "time_elapsed": 0.03814506530761719
    },
    {
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_operations": 417,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/32/19",
        "date_utc": 1587342723.16143,
        "device_name": "MacbookPro",
        "msecs_per_operation": 13.444536881481143,
        "num_cpus": 16,
        "operations_per_second": 74.3796538932796,
        "time_elapsed": 5.606371879577637
    },
    {
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_operations": 417,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/32/19",
        "date_utc": 1587342726.723648,
        "device_name": "MacbookPro",
        "msecs_per_operation": 8.542242095910673,
        "num_cpus": 16,
        "operations_per_second": 117.06528435651785,
        "time_elapsed": 3.562114953994751
    },
    {
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_operations": 417,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/32/19",
        "date_utc": 1587342731.724079,
        "device_name": "MacbookPro",
        "msecs_per_operation": 11.991187537030921,
        "num_cpus": 16,
        "operations_per_second": 83.39457596771145,
        "time_elapsed": 5.0003252029418945
    },
    {
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_operations": 417,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/32/19",
        "date_utc": 1587342735.707691,
        "device_name": "MacbookPro",
        "msecs_per_operation": 9.552724641575802,
        "num_cpus": 16,
        "operations_per_second": 104.68217576875969,
        "time_elapsed": 3.9834861755371094
    },
    {
        "benchmark_name": "Random Reads: Find Friends of Friends",
        "build_type": "debug",
        "count_operations": 19,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/07/19",
        "date_utc": 1587344849.760953,
        "device_name": "MacbookPro",
        "msecs_per_operation": 2401.8793733496414,
        "num_cpus": 16,
        "operations_per_second": 0.4163406418722053,
        "time_elapsed": 45.63570809364319
    },
    {
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_operations": 3044,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/57/19",
        "date_utc": 1587344270.016394,
        "device_name": "MacbookPro",
        "msecs_per_operation": 3.4939290346203276,
        "num_cpus": 16,
        "operations_per_second": 286.2107358481785,
        "time_elapsed": 10.635519981384277
    },
    {
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_operations": 3044,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/58/19",
        "date_utc": 1587344280.284819,
        "device_name": "MacbookPro",
        "msecs_per_operation": 3.373276231793317,
        "num_cpus": 16,
        "operations_per_second": 296.44770581636453,
        "time_elapsed": 10.268252849578857
    },
    {
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_operations": 3044,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/58/19",
        "date_utc": 1587344292.316721,
        "device_name": "MacbookPro",
        "msecs_per_operation": 3.952620925477237,
        "num_cpus": 16,
        "operations_per_second": 252.99668722450548,
        "time_elapsed": 12.03177809715271
    },
    {
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/33/19",
        "date_utc": 1587342809.889823,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.24296903610229492,
        "num_cpus": 16,
        "operations_per_second": 4115.750780601441,
        "time_elapsed": 1.2148451805114746
    },
    {
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/33/19",
        "date_utc": 1587342811.140235,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.2500551700592041,
        "num_cpus": 16,
        "operations_per_second": 3999.1174738088234,
        "time_elapsed": 1.2502758502960205
    },
    {
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/33/19",
        "date_utc": 1587342811.896456,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.15121593475341796,
        "num_cpus": 16,
        "operations_per_second": 6613.05967278291,
        "time_elapsed": 0.7560796737670898
    },
    {
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MovieRatings",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/33/19",
        "date_utc": 1587342812.659733,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.15262479782104493,
        "num_cpus": 16,
        "operations_per_second": 6552.015231315925,
        "time_elapsed": 0.7631239891052246
    },
    {
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342856.242079,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.7256617546081543,
        "num_cpus": 16,
        "operations_per_second": 1378.05250676327,
        "time_elapsed": 0.36283087730407715
    },
    {
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342856.262099,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.03973245620727539,
        "num_cpus": 16,
        "operations_per_second": 25168.340834083407,
        "time_elapsed": 0.019866228103637695
    },
    {
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342857.238853,
        "device_name": "MacbookPro",
        "msecs_per_operation": 1.9532217979431155,
        "num_cpus": 16,
        "operations_per_second": 511.97462625753656,
        "time_elapsed": 0.9766108989715576
    },
    {
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342857.310287,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.14258384704589844,
        "num_cpus": 16,
        "operations_per_second": 7013.41716273159,
        "time_elapsed": 0.07129192352294922
    },
    {
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342857.38443,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.14798974990844727,
        "num_cpus": 16,
        "operations_per_second": 6757.224744407247,
        "time_elapsed": 0.07399487495422363
    },
    {
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342857.454191,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.1392202377319336,
        "num_cpus": 16,
        "operations_per_second": 7182.863758108821,
        "time_elapsed": 0.0696101188659668
    },
    {
        "benchmark_name": "Random Reads: Find Friends of Friends",
        "build_type": "debug",
        "count_operations": 300,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/09/19",
        "date_utc": 1587344975.691237,
        "device_name": "MacbookPro",
        "msecs_per_operation": 7.5340469678243,
        "num_cpus": 16,
        "operations_per_second": 132.73078921205376,
        "time_elapsed": 2.26021409034729
    },
    {
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_operations": 4994,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/59/19",
        "date_utc": 1587344343.972795,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.46848420099969573,
        "num_cpus": 16,
        "operations_per_second": 2134.5437004409237,
        "time_elapsed": 2.3396100997924805
    },
    {
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_operations": 4994,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/59/19",
        "date_utc": 1587344344.688704,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.14332236411049218,
        "num_cpus": 16,
        "operations_per_second": 6977.2781533876005,
        "time_elapsed": 0.7157518863677979
    },
    {
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_operations": 4994,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/59/19",
        "date_utc": 1587344345.386329,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.13966239544215753,
        "num_cpus": 16,
        "operations_per_second": 7160.123502350775,
        "time_elapsed": 0.6974740028381348
    },
    {
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342860.178787,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.31050314903259274,
        "num_cpus": 16,
        "operations_per_second": 3220.579253755112,
        "time_elapsed": 1.5525157451629639
    },
    {
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342860.701411,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.10448617935180664,
        "num_cpus": 16,
        "operations_per_second": 9570.64375598407,
        "time_elapsed": 0.5224308967590332
    },
    {
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342860.772996,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.014268207550048827,
        "num_cpus": 16,
        "operations_per_second": 70085.88825837326,
        "time_elapsed": 0.07134103775024414
    },
    {
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "PatentCitations",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/34/19",
        "date_utc": 1587342860.845561,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.014479970932006836,
        "num_cpus": 16,
        "operations_per_second": 69060.91211754981,
        "time_elapsed": 0.07239985466003418
    },
    {
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_operations": 14506196,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/36/19",
        "date_utc": 1587292576.636705,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.0023267743670164496,
        "num_cpus": 16,
        "operations_per_second": 429779.5326335269,
        "time_elapsed": 33.75264501571655
    },
    {
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/35/19",
        "date_utc": 1587342902.433364,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.7942776679992676,
        "num_cpus": 16,
        "operations_per_second": 1259.0055597546047,
        "time_elapsed": 0.3971388339996338
    },
    {
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_operations": 500,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/35/19",
        "date_utc": 1587342902.451687,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.03617382049560547,
        "num_cpus": 16,
        "operations_per_second": 27644.30149481954,
        "time_elapsed": 0.018086910247802734
    },
    {
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_operations": 496,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/35/19",
        "date_utc": 1587342910.564974,
        "device_name": "MacbookPro",
        "msecs_per_operation": 16.356830635378437,
        "num_cpus": 16,
        "operations_per_second": 61.136538140652064,
        "time_elapsed": 8.112987995147705
    },
    {
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_operations": 496,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/35/19",
        "date_utc": 1587342913.912538,
        "device_name": "MacbookPro",
        "msecs_per_operation": 6.74870946714955,
        "num_cpus": 16,
        "operations_per_second": 148.17647801667326,
        "time_elapsed": 3.3473598957061768
    },
    {
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_operations": 496,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/35/19",
        "date_utc": 1587342917.528338,
        "device_name": "MacbookPro",
        "msecs_per_operation": 7.289546631997632,
        "num_cpus": 16,
        "operations_per_second": 137.18274269767028,
        "time_elapsed": 3.615615129470825
    },
    {
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_operations": 496,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/35/19",
        "date_utc": 1587342920.764581,
        "device_name": "MacbookPro",
        "msecs_per_operation": 6.5243364341797365,
        "num_cpus": 16,
        "operations_per_second": 153.272292146247,
        "time_elapsed": 3.2360708713531494
    },
    {
        "benchmark_name": "Random Reads: Find Friends of Friends",
        "build_type": "debug",
        "count_operations": 5,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/11/19",
        "date_utc": 1587345067.439262,
        "device_name": "MacbookPro",
        "msecs_per_operation": 10427.241563796997,
        "num_cpus": 16,
        "operations_per_second": 0.09590264058636212,
        "time_elapsed": 52.136207818984985
    },
    {
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_operations": 4332,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/01/19",
        "date_utc": 1587344479.836142,
        "device_name": "MacbookPro",
        "msecs_per_operation": 9.209420597344115,
        "num_cpus": 16,
        "operations_per_second": 108.58446407457902,
        "time_elapsed": 39.8952100276947
    },
    {
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_operations": 4332,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/01/19",
        "date_utc": 1587344510.831599,
        "device_name": "MacbookPro",
        "msecs_per_operation": 7.154956803977875,
        "num_cpus": 16,
        "operations_per_second": 139.76324768921586,
        "time_elapsed": 30.995272874832153
    },
    {
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_operations": 4332,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/02/19",
        "date_utc": 1587344538.963035,
        "device_name": "MacbookPro",
        "msecs_per_operation": 6.493820488067655,
        "num_cpus": 16,
        "operations_per_second": 153.99255366505622,
        "time_elapsed": 28.131230354309082
    },
    {
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/36/19",
        "date_utc": 1587342981.39685,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.2575859546661377,
        "num_cpus": 16,
        "operations_per_second": 3882.199249940161,
        "time_elapsed": 1.2879297733306885
    },
    {
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/36/19",
        "date_utc": 1587342982.223741,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.16533718109130857,
        "num_cpus": 16,
        "operations_per_second": 6048.246337572086,
        "time_elapsed": 0.826685905456543
    },
    {
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/36/19",
        "date_utc": 1587342982.612606,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.07772679328918457,
        "num_cpus": 16,
        "operations_per_second": 12865.576433591874,
        "time_elapsed": 0.38863396644592285
    },
    {
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_operations": 5000,
        "database": "PontDBmono",
        "dataset": "MouseGenes",
        "date_readable": "Apr 19, 2020",
        "date_sortable": "2020/36/19",
        "date_utc": 1587342982.933308,
        "device_name": "MacbookPro",
        "msecs_per_operation": 0.0640946388244629,
        "num_cpus": 16,
        "operations_per_second": 15601.92893416121,
        "time_elapsed": 0.32047319412231445
    },
    {
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_iterations": 2,
        "count_operations": 19972,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/07/28-18:04:22",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/07/28",
        "date_utc": 1588115242.994601,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.004640913382097974,
        "num_cpus": 16,
        "operations_per_second": 215474.82524828753,
        "time_elapsed": 0.09268832206726074
    },
    {
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2811698,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/07/28-18:04:34",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/07/28",
        "date_utc": 1588115254.078092,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.002219723491794727,
        "num_cpus": 16,
        "operations_per_second": 450506.5625049828,
        "time_elapsed": 6.241192102432251
    },
    {
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 16518947,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/09/28-18:04:10",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/09/28",
        "date_utc": 1588115350.641084,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.004191958676434368,
        "num_cpus": 16,
        "operations_per_second": 238551.96989932843,
        "time_elapsed": 69.24674320220947
    },
    {
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:00",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134360.589822,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.0249392032623291,
        "num_cpus": 16,
        "operations_per_second": 40097.5119165298,
        "time_elapsed": 0.12469601631164551
    },
    {
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:00",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134360.723473,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.02574319839477539,
        "num_cpus": 16,
        "operations_per_second": 38845.21203095537,
        "time_elapsed": 0.12871599197387695
    },
    {
        "benchmark_code": "    def find_es_from(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_from(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2815,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:00",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134360.834807,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03919821649419266,
        "num_cpus": 16,
        "operations_per_second": 25511.364787429884,
        "time_elapsed": 0.11034297943115234
    },
    {
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2815,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:00",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134360.947743,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.0397846499725938,
        "num_cpus": 16,
        "operations_per_second": 25135.32230870106,
        "time_elapsed": 0.11199378967285156
    },
    {
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2815,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134361.091511,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.050672883462313016,
        "num_cpus": 16,
        "operations_per_second": 19734.42069353979,
        "time_elapsed": 0.14264416694641113
    },
    {
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2815,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134361.125509,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.011737816710666907,
        "num_cpus": 16,
        "operations_per_second": 85194.71931191733,
        "time_elapsed": 0.033041954040527344
    },
    {
        "benchmark_code": "    def find_vs_related_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_analyze:\n            vs = self.graph.nodes_related_to_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related to related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends of Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 277,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/09/28-18:04:33",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/09/28",
        "date_utc": 1588115373.795712,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.11427049602412145,
        "num_cpus": 16,
        "operations_per_second": 8751.165303324746,
        "time_elapsed": 0.03165292739868164
    },
    {
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2815,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134361.23534,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03865607890100293,
        "num_cpus": 16,
        "operations_per_second": 25869.152496324583,
        "time_elapsed": 0.10881686210632324
    },
    {
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2815,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134361.347841,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03964261517431554,
        "num_cpus": 16,
        "operations_per_second": 25225.379193648663,
        "time_elapsed": 0.11159396171569824
    },
    {
        "benchmark_code": "    def count_v_following(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_following(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2815,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134361.466099,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.041694539478362984,
        "num_cpus": 16,
        "operations_per_second": 23983.955993060943,
        "time_elapsed": 0.1173701286315918
    },
    {
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:02",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134362.182929,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.14318342208862306,
        "num_cpus": 16,
        "operations_per_second": 6984.048749589546,
        "time_elapsed": 0.7159171104431152
    },
    {
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:02",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134362.869545,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.13716697692871094,
        "num_cpus": 16,
        "operations_per_second": 7290.384481679761,
        "time_elapsed": 0.6858348846435547
    },
    {
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:03",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134363.068018,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03953762054443359,
        "num_cpus": 16,
        "operations_per_second": 25292.366769420765,
        "time_elapsed": 0.19768810272216797
    },
    {
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "CommunitiesFB",
        "date": "2020/26/28-23:04:03",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134363.248637,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.035952425003051756,
        "num_cpus": 16,
        "operations_per_second": 27814.53545665186,
        "time_elapsed": 0.1797621250152588
    },
    {
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/26/28-23:04:13",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134373.509454,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.04750180244445801,
        "num_cpus": 16,
        "operations_per_second": 21051.832741910388,
        "time_elapsed": 0.23750901222229004
    },
    {
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/26/28-23:04:13",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134373.792998,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.05634541511535645,
        "num_cpus": 16,
        "operations_per_second": 17747.672955336144,
        "time_elapsed": 0.2817270755767822
    },
    {
        "benchmark_code": "    def find_es_from(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_from(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2964,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/26/28-23:04:33",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134393.037084,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.492234917304777,
        "num_cpus": 16,
        "operations_per_second": 154.03016260772426,
        "time_elapsed": 19.242984294891357
    },
    {
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2964,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/26/28-23:04:50",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/26/28",
        "date_utc": 1588134410.771162,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 5.982826595846941,
        "num_cpus": 16,
        "operations_per_second": 167.14507498749228,
        "time_elapsed": 17.733098030090332
    },
    {
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2964,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/27/28-23:04:09",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/27/28",
        "date_utc": 1588134429.188081,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.2130810278147335,
        "num_cpus": 16,
        "operations_per_second": 160.95074175327795,
        "time_elapsed": 18.41557216644287
    },
    {
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2964,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/27/28-23:04:09",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/27/28",
        "date_utc": 1588134429.450436,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.08818245770638448,
        "num_cpus": 16,
        "operations_per_second": 11340.123943127512,
        "time_elapsed": 0.26137280464172363
    },
    {
        "benchmark_code": "    def find_vs_related_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_analyze:\n            vs = self.graph.nodes_related_to_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related to related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends of Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 3,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/45/28-19:04:45",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/45/28",
        "date_utc": 1588121145.05853,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 27546.732664108276,
        "num_cpus": 16,
        "operations_per_second": 0.03630194594014191,
        "time_elapsed": 82.64019799232483
    },
    {
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2964,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/27/28-23:04:26",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/27/28",
        "date_utc": 1588134446.008466,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 5.586022307515627,
        "num_cpus": 16,
        "operations_per_second": 179.01826110765177,
        "time_elapsed": 16.55697011947632
    },
    {
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2964,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/27/28-23:04:42",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/27/28",
        "date_utc": 1588134462.873653,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 5.689701409796793,
        "num_cpus": 16,
        "operations_per_second": 175.75614746287974,
        "time_elapsed": 16.864274978637695
    },
    {
        "benchmark_code": "    def count_v_following(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_following(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 2964,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/27/28-23:04:59",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/27/28",
        "date_utc": 1588134479.993151,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 5.77550000346463,
        "num_cpus": 16,
        "operations_per_second": 173.14518213143725,
        "time_elapsed": 17.118582010269165
    },
    {
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/28/28-23:04:00",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/28/28",
        "date_utc": 1588134480.895376,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.18026041984558105,
        "num_cpus": 16,
        "operations_per_second": 5547.529517886643,
        "time_elapsed": 0.9013020992279053
    },
    {
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/28/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/28/28",
        "date_utc": 1588134481.874686,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.1957036018371582,
        "num_cpus": 16,
        "operations_per_second": 5109.767989002491,
        "time_elapsed": 0.978518009185791
    },
    {
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/28/28-23:04:02",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/28/28",
        "date_utc": 1588134482.291485,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.08319835662841797,
        "num_cpus": 16,
        "operations_per_second": 12019.468178514851,
        "time_elapsed": 0.41599178314208984
    },
    {
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MovieRatings",
        "date": "2020/28/28-23:04:02",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/28/28",
        "date_utc": 1588134482.72375,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.08628215789794921,
        "num_cpus": 16,
        "operations_per_second": 11589.881666876674,
        "time_elapsed": 0.4314107894897461
    },
    {
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/28/28-23:04:59",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/28/28",
        "date_utc": 1588134539.044253,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03565096855163574,
        "num_cpus": 16,
        "operations_per_second": 28049.728818773365,
        "time_elapsed": 0.1782548427581787
    },
    {
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/28/28-23:04:59",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/28/28",
        "date_utc": 1588134539.251514,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.04114937782287598,
        "num_cpus": 16,
        "operations_per_second": 24301.704008853198,
        "time_elapsed": 0.20574688911437988
    },
    {
        "benchmark_code": "    def find_es_from(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_from(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4990,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/28/28-23:04:59",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/28/28",
        "date_utc": 1588134539.920641,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.13383419098022706,
        "num_cpus": 16,
        "operations_per_second": 7471.932192183551,
        "time_elapsed": 0.667832612991333
    },
    {
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4990,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:00",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134540.56341,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.12860627833731428,
        "num_cpus": 16,
        "operations_per_second": 7775.670153343179,
        "time_elapsed": 0.6417453289031982
    },
    {
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4990,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134541.243704,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.13611182898939972,
        "num_cpus": 16,
        "operations_per_second": 7346.900026432525,
        "time_elapsed": 0.6791980266571045
    },
    {
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4990,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134541.322974,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.015676523258308612,
        "num_cpus": 16,
        "operations_per_second": 63789.65434634856,
        "time_elapsed": 0.07822585105895996
    },
    {
        "benchmark_code": "    def find_vs_related_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_analyze:\n            vs = self.graph.nodes_related_to_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related to related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends of Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 300,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/47/28-19:04:34",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/47/28",
        "date_utc": 1588121254.459653,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.21413405736287436,
        "num_cpus": 16,
        "operations_per_second": 4669.971756549623,
        "time_elapsed": 0.0642402172088623
    },
    {
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4990,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:01",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134541.848083,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.1050057535419961,
        "num_cpus": 16,
        "operations_per_second": 9523.287689184184,
        "time_elapsed": 0.5239787101745605
    },
    {
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4990,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:02",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134542.456992,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.1218478521985377,
        "num_cpus": 16,
        "operations_per_second": 8206.956314425714,
        "time_elapsed": 0.6080207824707031
    },
    {
        "benchmark_code": "    def count_v_following(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_following(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4990,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:03",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134543.034357,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.11543768919063714,
        "num_cpus": 16,
        "operations_per_second": 8662.682066933712,
        "time_elapsed": 0.5760340690612793
    },
    {
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:03",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134543.897882,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.17252583503723146,
        "num_cpus": 16,
        "operations_per_second": 5796.233357074886,
        "time_elapsed": 0.8626291751861572
    },
    {
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:04",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134544.594382,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.13913464546203613,
        "num_cpus": 16,
        "operations_per_second": 7187.282482225874,
        "time_elapsed": 0.6956732273101807
    },
    {
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:04",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134544.829592,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.046876382827758786,
        "num_cpus": 16,
        "operations_per_second": 21332.70401162075,
        "time_elapsed": 0.23438191413879395
    },
    {
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "PatentCitations",
        "date": "2020/29/28-23:04:05",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134545.008661,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.035641622543334965,
        "num_cpus": 16,
        "operations_per_second": 28057.084067487314,
        "time_elapsed": 0.1782081127166748
    },
    {
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 14461095,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/59/28-19:04:29",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/59/28",
        "date_utc": 1588121969.351229,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.0023419131241454003,
        "num_cpus": 16,
        "operations_per_second": 427001.3219917862,
        "time_elapsed": 33.86662817001343
    },
    {
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/29/28-23:04:57",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134597.969596,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.04175882339477539,
        "num_cpus": 16,
        "operations_per_second": 23947.034870841544,
        "time_elapsed": 0.20879411697387695
    },
    {
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/29/28-23:04:58",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/29/28",
        "date_utc": 1588134598.161612,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03811559677124023,
        "num_cpus": 16,
        "operations_per_second": 26235.97909280383,
        "time_elapsed": 0.19057798385620117
    },
    {
        "benchmark_code": "    def find_es_from(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_from(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Outgoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4288,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/30/28-23:04:27",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/30/28",
        "date_utc": 1588134627.530186,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.848770958274159,
        "num_cpus": 16,
        "operations_per_second": 146.01159917486757,
        "time_elapsed": 29.36752986907959
    },
    {
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4288,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/30/28-23:04:56",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/30/28",
        "date_utc": 1588134656.557441,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.769171179230534,
        "num_cpus": 16,
        "operations_per_second": 147.72857319198008,
        "time_elapsed": 29.026206016540527
    },
    {
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4288,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/31/28-23:04:26",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/31/28",
        "date_utc": 1588134686.363664,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.950845858499186,
        "num_cpus": 16,
        "operations_per_second": 143.86738252542955,
        "time_elapsed": 29.805227041244507
    },
    {
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4288,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/31/28-23:04:26",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/31/28",
        "date_utc": 1588134686.776262,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.09597926887113656,
        "num_cpus": 16,
        "operations_per_second": 10418.91662399114,
        "time_elapsed": 0.4115591049194336
    },
    {
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4288,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/31/28-23:04:53",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/31/28",
        "date_utc": 1588134713.910161,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.327636428733371,
        "num_cpus": 16,
        "operations_per_second": 158.03689280551384,
        "time_elapsed": 27.13290500640869
    },
    {
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4288,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/32/28-23:04:20",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/32/28",
        "date_utc": 1588134740.596356,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.223241117463183,
        "num_cpus": 16,
        "operations_per_second": 160.6879728946829,
        "time_elapsed": 26.68525791168213
    },
    {
        "benchmark_code": "    def count_v_following(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_following(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Following",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 4288,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/32/28-23:04:49",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/32/28",
        "date_utc": 1588134769.925356,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 6.83956671116957,
        "num_cpus": 16,
        "operations_per_second": 146.20809215398373,
        "time_elapsed": 29.328062057495117
    },
    {
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/32/28-23:04:50",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/32/28",
        "date_utc": 1588134770.872714,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.1892822265625,
        "num_cpus": 16,
        "operations_per_second": 5283.116213078808,
        "time_elapsed": 0.9464111328125
    },
    {
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/32/28-23:04:51",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/32/28",
        "date_utc": 1588134771.905638,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.2063730239868164,
        "num_cpus": 16,
        "operations_per_second": 4845.594548558257,
        "time_elapsed": 1.031865119934082
    },
    {
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/32/28-23:04:52",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/32/28",
        "date_utc": 1588134772.237139,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.06609954833984374,
        "num_cpus": 16,
        "operations_per_second": 15128.696414968028,
        "time_elapsed": 0.33049774169921875
    },
    {
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 5000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "MouseGenes",
        "date": "2020/32/28-23:04:52",
        "date_readable": "Apr 28, 2020",
        "date_sortable": "2020/32/28",
        "date_utc": 1588134772.604629,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.07328801155090332,
        "num_cpus": 16,
        "operations_per_second": 13644.796452219673,
        "time_elapsed": 0.3664400577545166
    },
    {
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 87273967,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/10/29-11:04:00",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/10/29",
        "date_utc": 1588176600.980695,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.005424690436833977,
        "num_cpus": 16,
        "operations_per_second": 184342.31623798094,
        "time_elapsed": 473.4342541694641
    },
    {
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "benchmark_name": "Sequential Writes: Import CSV",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 87273967,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/12/29-11:04:52",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/12/29",
        "date_utc": 1588176772.601147,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.0019661631862177022,
        "num_cpus": 16,
        "operations_per_second": 508604.7826598232,
        "time_elapsed": 171.5948610305786
    },
    {
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 20000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/12/29-17:04:36",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/12/29",
        "date_utc": 1588198356.565155,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.22529635429382325,
        "num_cpus": 16,
        "operations_per_second": 4438.5982326897165,
        "time_elapsed": 4.505927085876465
    },
    {
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 20000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/12/29-17:04:38",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/12/29",
        "date_utc": 1588198358.717221,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.10738811492919922,
        "num_cpus": 16,
        "operations_per_second": 9312.017448665507,
        "time_elapsed": 2.1477622985839844
    },
    {
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/13/29-17:04:48",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/13/29",
        "date_utc": 1588198428.262759,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 3.579778249580272,
        "num_cpus": 16,
        "operations_per_second": 279.3469120935772,
        "time_elapsed": 69.54435205459595
    },
    {
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/14/29-17:04:17",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/14/29",
        "date_utc": 1588198457.958797,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 1.5285290011033204,
        "num_cpus": 16,
        "operations_per_second": 654.2237662996133,
        "time_elapsed": 29.694732904434204
    },
    {
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/14/29-17:04:18",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/14/29",
        "date_utc": 1588198458.620302,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03398630029599113,
        "num_cpus": 16,
        "operations_per_second": 29423.620437966747,
        "time_elapsed": 0.6602518558502197
    },
    {
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/14/29-17:04:43",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/14/29",
        "date_utc": 1588198483.75572,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 1.2937801560586348,
        "num_cpus": 16,
        "operations_per_second": 772.9288436811357,
        "time_elapsed": 25.1342670917511
    },
    {
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/15/29-17:04:09",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/15/29",
        "date_utc": 1588198509.230569,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 1.3112614279627377,
        "num_cpus": 16,
        "operations_per_second": 762.6244307007993,
        "time_elapsed": 25.473875761032104
    },
    {
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/15/29-17:04:10",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/15/29",
        "date_utc": 1588198510.731795,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.1500236988067627,
        "num_cpus": 16,
        "operations_per_second": 6665.613552749724,
        "time_elapsed": 1.500236988067627
    },
    {
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/15/29-17:04:12",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/15/29",
        "date_utc": 1588198512.159065,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.14263648986816407,
        "num_cpus": 16,
        "operations_per_second": 7010.828722189386,
        "time_elapsed": 1.4263648986816406
    },
    {
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/15/29-17:04:12",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/15/29",
        "date_utc": 1588198512.669696,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.050974798202514646,
        "num_cpus": 16,
        "operations_per_second": 19617.53719999364,
        "time_elapsed": 0.5097479820251465
    },
    {
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBchunk",
        "dataset": "HumanBrain",
        "date": "2020/15/29-17:04:13",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/15/29",
        "date_utc": 1588198513.172974,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.0502190113067627,
        "num_cpus": 16,
        "operations_per_second": 19912.77753143133,
        "time_elapsed": 0.502190113067627
    },
    {
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 20000,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/15/29-17:04:59",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/15/29",
        "date_utc": 1588198559.011303,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.588290560245514,
        "num_cpus": 16,
        "operations_per_second": 1699.8402958950514,
        "time_elapsed": 11.765811204910278
    },
    {
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Any Relation",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 20000,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/15/29-17:04:59",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/15/29",
        "date_utc": 1588198559.645904,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03152710199356079,
        "num_cpus": 16,
        "operations_per_second": 31718.74155145131,
        "time_elapsed": 0.6305420398712158
    },
    {
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 15154,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/17/29-17:04:59",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/17/29",
        "date_utc": 1588198679.648772,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 7.918799994912865,
        "num_cpus": 16,
        "operations_per_second": 126.28175994373042,
        "time_elapsed": 120.00149512290955
    },
    {
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/18/29-17:04:46",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/18/29",
        "date_utc": 1588198726.562739,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 2.4147529133730763,
        "num_cpus": 16,
        "operations_per_second": 414.1210450402307,
        "time_elapsed": 46.911404848098755
    },
    {
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "benchmark_name": "Random Reads: Find Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/19/29-17:04:03",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/19/29",
        "date_utc": 1588198743.579672,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.8758643691253938,
        "num_cpus": 16,
        "operations_per_second": 1141.7292850930373,
        "time_elapsed": 17.015417098999023
    },
    {
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Friends",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/19/29-17:04:35",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/19/29",
        "date_utc": 1588198775.53442,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 1.6447989811904395,
        "num_cpus": 16,
        "operations_per_second": 607.9770302850261,
        "time_elapsed": 31.95350980758667
    },
    {
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "benchmark_name": "Random Reads: Count Followers",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 19427,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/20/29-17:04:07",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/20/29",
        "date_utc": 1588198807.438013,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 1.642169774195339,
        "num_cpus": 16,
        "operations_per_second": 608.9504360107948,
        "time_elapsed": 31.902432203292847
    },
    {
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/20/29-17:04:08",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/20/29",
        "date_utc": 1588198808.63588,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.11967077255249024,
        "num_cpus": 16,
        "operations_per_second": 8356.259249194518,
        "time_elapsed": 1.1967077255249023
    },
    {
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edge",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/20/29-17:04:09",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/20/29",
        "date_utc": 1588198809.595988,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.09591727256774903,
        "num_cpus": 16,
        "operations_per_second": 10425.650909680238,
        "time_elapsed": 0.9591727256774902
    },
    {
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/20/29-17:04:09",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/20/29",
        "date_utc": 1588198809.952916,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.035601472854614256,
        "num_cpus": 16,
        "operations_per_second": 28088.72554469025,
        "time_elapsed": 0.3560147285461426
    },
    {
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "build_type": "debug",
        "count_iterations": 1,
        "count_operations": 10000,
        "cpu_scaling_enabled": false,
        "database": "PontDBmono",
        "dataset": "HumanBrain",
        "date": "2020/20/29-17:04:10",
        "date_readable": "Apr 29, 2020",
        "date_sortable": "2020/20/29",
        "date_utc": 1588198810.335062,
        "device_name": "MacbookPro",
        "mhz_per_cpu": 2300,
        "msecs_per_operation": 0.03810210227966309,
        "num_cpus": 16,
        "operations_per_second": 26245.271000013767,
        "time_elapsed": 0.38102102279663086
    }
]