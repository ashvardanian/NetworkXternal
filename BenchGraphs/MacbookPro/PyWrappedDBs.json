[
    {
        "database": "Parsing in Python",
        "dataset": "PatentCitations",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 62.7117440700531,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.003796352398857693,
        "operations_per_second": 263410.74140032305,
        "benchmark_code": "            func=lambda: g.add_edges_stream(yield_edges_from_csv(p)),\n",
        "date": "2020/58/05-06:09:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274711.117122,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/58/05",
        "bytes_sent": 246784,
        "bytes_sent_per_second": 3935.211875535246,
        "bytes_recv": 331776,
        "bytes_recv_per_second": 5290.492313997592,
        "packets_sent": 1094,
        "packets_sent_per_second": 17.44489833958263,
        "packets_recv": 1077,
        "packets_recv_per_second": 17.173816738327687,
        "read_bytes": 1355587584,
        "read_bytes_per_second": 21616167.81835505,
        "write_bytes": 657895424,
        "write_bytes_per_second": 10490784.999777522,
        "read_requests": 6702,
        "read_requests_per_second": 106.86993480062411,
        "write_requests": 4333,
        "write_requests_per_second": 69.09391636692095
    },
    {
        "database": "Parsing in Python",
        "dataset": "MouseGenes",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 53.83746790885925,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.0037113429260751236,
        "operations_per_second": 269444.24697976786,
        "benchmark_code": "            func=lambda: g.add_edges_stream(yield_edges_from_csv(p)),\n",
        "date": "2020/00/05-07:09:22",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274822.984447,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/00/05",
        "bytes_sent": 73728,
        "bytes_sent_per_second": 1369.4551928930455,
        "bytes_recv": 67584,
        "bytes_recv_per_second": 1255.333926818625,
        "packets_sent": 204,
        "packets_sent_per_second": 3.7891826626272422,
        "packets_recv": 344,
        "packets_recv_per_second": 6.389602136979271,
        "read_bytes": 397824000,
        "read_bytes_per_second": 7389351.978318725,
        "write_bytes": 5287936,
        "write_bytes_per_second": 98220.36966805121,
        "read_requests": 3241,
        "read_requests_per_second": 60.19971083124947,
        "write_requests": 857,
        "write_requests_per_second": 15.918282067997776
    },
    {
        "database": "Parsing in Python",
        "dataset": "HumanBrain",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 359.1923599243164,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.00411568732660355,
        "operations_per_second": 242972.78210034606,
        "benchmark_code": "            func=lambda: g.add_edges_stream(yield_edges_from_csv(p)),\n",
        "date": "2020/07/05-07:09:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599275232.111062,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/07/05",
        "bytes_sent": 746496,
        "bytes_sent_per_second": 2078.2624668222074,
        "bytes_recv": 886784,
        "bytes_recv_per_second": 2468.827566897163,
        "packets_sent": 3063,
        "packets_sent_per_second": 8.527464227372178,
        "packets_recv": 3201,
        "packets_recv_per_second": 8.911659481494725,
        "read_bytes": 5245349888,
        "read_bytes_per_second": 14603177.77667994,
        "write_bytes": 771608576,
        "write_bytes_per_second": 2148176.470575771,
        "read_requests": 45463,
        "read_requests_per_second": 126.57006404473435,
        "write_requests": 10198,
        "write_requests_per_second": 28.39147247494008
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/12/17-01:06:26",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592374346.343811,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/12/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 329.99657797813416,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.019976853123757472,
        "operations_per_second": 50057.934240441
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 501.8277533054352,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.030378919025857713,
        "operations_per_second": 32917.56362854212,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/02/03-06:09:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599098531.115261,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/02/03",
        "bytes_sent": 2533691392,
        "bytes_sent_per_second": 5048926.400166394,
        "bytes_recv": 2533269504,
        "bytes_recv_per_second": 5048085.697361057,
        "packets_sent": 231367,
        "packets_sent_per_second": 461.0486336716804,
        "packets_recv": 230351,
        "packets_recv_per_second": 459.0240346069459,
        "read_bytes": 2514378752,
        "read_bytes_per_second": 5010441.800873525,
        "write_bytes": 6339993600,
        "write_bytes_per_second": 12633804.245061735,
        "read_requests": 36672,
        "read_requests_per_second": 73.07686702947207,
        "write_requests": 116295,
        "write_requests_per_second": 231.7428624343492
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 2798.5478250980377,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.16941442000498202,
        "operations_per_second": 5902.685261210898,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/44/03-04:09:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599093893.02456,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/44/03",
        "bytes_sent": 7485451264,
        "bytes_sent_per_second": 2674762.674008536,
        "bytes_recv": 7483268096,
        "bytes_recv_per_second": 2673982.5665612305,
        "packets_sent": 81241405,
        "packets_sent_per_second": 29029.84336069153,
        "packets_recv": 81229384,
        "packets_recv_per_second": 29025.547918643984,
        "read_bytes": 24577941504,
        "read_bytes_per_second": 8782391.097118018,
        "write_bytes": 62886260736,
        "write_bytes_per_second": 22471033.073660977,
        "read_requests": 272197,
        "read_requests_per_second": 97.26365851563195,
        "write_requests": 1318973,
        "write_requests_per_second": 471.3062210947902
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 1389.3313291072845,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.08410532033956429,
        "operations_per_second": 11889.854244209879,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/58/03-03:09:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599091089.469037,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/58/03",
        "bytes_sent": 858382336,
        "bytes_sent_per_second": 617838.465178464,
        "bytes_recv": 947913728,
        "bytes_recv_per_second": 682280.5389475254,
        "packets_sent": 274634,
        "packets_sent_per_second": 197.67350972821308,
        "packets_recv": 261701,
        "packets_recv_per_second": 188.3647151095024,
        "read_bytes": 13161598976,
        "read_bytes_per_second": 9473333.466435967,
        "write_bytes": 135279906816,
        "write_bytes_per_second": 97370514.8525832,
        "read_requests": 135295,
        "read_requests_per_second": 97.3813784843777,
        "write_requests": 15364015,
        "write_requests_per_second": 11058.568016221267
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 342.52584505081177,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.023612382257265224,
        "operations_per_second": 42350.66115331557,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/55/03-04:09:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599094551.982362,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/55/03",
        "bytes_sent": 548864,
        "bytes_sent_per_second": 1602.401710500354,
        "bytes_recv": 338944,
        "bytes_recv_per_second": 989.5428473425694,
        "packets_sent": 2216,
        "packets_sent_per_second": 6.469584797816553,
        "packets_recv": 1704,
        "packets_recv_per_second": 4.974807082797566,
        "read_bytes": 2799308800,
        "read_bytes_per_second": 8172547.679094809,
        "write_bytes": 8033153024,
        "write_bytes_per_second": 23452691.64377458,
        "read_requests": 197266,
        "read_requests_per_second": 575.9156654901084,
        "write_requests": 57526,
        "write_requests_per_second": 167.9464508480122
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 371.2153079509735,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.02559012079741467,
        "operations_per_second": 39077.580286413824,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/08/03-06:09:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599098936.221614,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/08/03",
        "bytes_sent": 2057542656,
        "bytes_sent_per_second": 5542720.388760854,
        "bytes_recv": 2057311232,
        "bytes_recv_per_second": 5542096.966194373,
        "packets_sent": 190623,
        "packets_sent_per_second": 513.5106120816969,
        "packets_recv": 189657,
        "packets_recv_per_second": 510.9083487070206,
        "read_bytes": 2894180352,
        "read_bytes_per_second": 7796500.5483616395,
        "write_bytes": 3135168512,
        "write_bytes_per_second": 8445687.569581755,
        "read_requests": 26067,
        "read_requests_per_second": 70.22070329988297,
        "write_requests": 84771,
        "write_requests_per_second": 228.3607334727579
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 2129.4635326862335,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.14679682617594808,
        "operations_per_second": 6812.136379579608,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/46/03-05:09:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599097588.028852,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/46/03",
        "bytes_sent": 5440587776,
        "bytes_sent_per_second": 2554910.0477606747,
        "bytes_recv": 5441137664,
        "bytes_recv_per_second": 2555168.2761790343,
        "packets_sent": 58235082,
        "packets_sent_per_second": 27347.30184674201,
        "packets_recv": 58230199,
        "packets_recv_per_second": 27345.00878094161,
        "read_bytes": 12668211200,
        "read_bytes_per_second": 5949015.3297058605,
        "write_bytes": 43674300416,
        "write_bytes_per_second": 20509531.976303257,
        "read_requests": 182665,
        "read_requests_per_second": 85.77982069013193,
        "write_requests": 2738036,
        "write_requests_per_second": 1285.7867523779928
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 901.2738580703735,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.06213026889133261,
        "operations_per_second": 16095.214423569048,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/10/03-05:09:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599095453.559782,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/10/03",
        "bytes_sent": 631756800,
        "bytes_sent_per_second": 700959.8629129116,
        "bytes_recv": 631458816,
        "bytes_recv_per_second": 700629.2375460138,
        "packets_sent": 147483,
        "packets_sent_per_second": 163.63838657848234,
        "packets_recv": 147461,
        "packets_recv_per_second": 163.61397668375056,
        "read_bytes": 4287377408,
        "read_bytes_per_second": 4757019.600212605,
        "write_bytes": 68781469696,
        "write_bytes_per_second": 76315837.94437471,
        "read_requests": 65717,
        "read_requests_per_second": 72.91568418582564,
        "write_requests": 8499319,
        "write_requests_per_second": 9430.34009462677
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 3450.965090036392,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.03954174662458499,
        "operations_per_second": 25289.72757562136,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/53/05-08:09:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599281631.848956,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/53/05",
        "bytes_sent": 7206912,
        "bytes_sent_per_second": 2088.375805599355,
        "bytes_recv": 8864768,
        "bytes_recv_per_second": 2568.7793903202064,
        "packets_sent": 33006,
        "packets_sent_per_second": 9.564281045697838,
        "packets_recv": 30937,
        "packets_recv_per_second": 8.964738614517179,
        "read_bytes": 77349781504,
        "read_bytes_per_second": 22413956.526921663,
        "write_bytes": 97485946880,
        "write_bytes_per_second": 28248893.95765286,
        "read_requests": 7941694,
        "read_requests_per_second": 2301.2965338099816,
        "write_requests": 3208842,
        "write_requests_per_second": 929.8390207610478
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 2924.4247212409973,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.03350855726818282,
        "operations_per_second": 29843.123116181552,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/56/05-07:09:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599278180.838597,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/56/05",
        "bytes_sent": 13797075968,
        "bytes_sent_per_second": 4717876.944408105,
        "bytes_recv": 13797357568,
        "bytes_recv_per_second": 4717973.236850839,
        "packets_sent": 1265947,
        "packets_sent_per_second": 432.8875319665564,
        "packets_recv": 1265961,
        "packets_recv_per_second": 432.8923192328855,
        "read_bytes": 23669260288,
        "read_bytes_per_second": 8093646.629397869,
        "write_bytes": 38169812992,
        "write_bytes_per_second": 13052075.751774663,
        "read_requests": 219064,
        "read_requests_per_second": 74.90840793707929,
        "write_requests": 701531,
        "write_requests_per_second": 239.8868382231091
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 13024.72899889946,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.14923956646658973,
        "operations_per_second": 6700.635921666725,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/45/05-14:09:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599302742.294712,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/45/05",
        "bytes_sent": 35115678720,
        "bytes_sent_per_second": 2696077.4940474494,
        "bytes_recv": 35124001792,
        "bytes_recv_per_second": 2696716.5147902765,
        "packets_sent": 353039127,
        "packets_sent_per_second": 27105.295398455542,
        "packets_recv": 353021817,
        "packets_recv_per_second": 27103.966388078323,
        "read_bytes": 222511337472,
        "read_bytes_per_second": 17083759.477130108,
        "write_bytes": 341980192768,
        "write_bytes_per_second": 26256223.280875634,
        "read_requests": 4657140,
        "read_requests_per_second": 357.5613742438334,
        "write_requests": 18778653,
        "write_requests_per_second": 1441.7691916343692
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 8075.50866985321,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.09253055575957961,
        "operations_per_second": 10807.240827541133,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/08/05-11:09:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599289707.859271,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/08/05",
        "bytes_sent": 6020349952,
        "bytes_sent_per_second": 745507.2117592603,
        "bytes_recv": 6066176000,
        "bytes_recv_per_second": 751181.9066761358,
        "packets_sent": 1449231,
        "packets_sent_per_second": 179.46002651327012,
        "packets_recv": 1445387,
        "packets_recv_per_second": 178.98401934676804,
        "read_bytes": 93813448704,
        "read_bytes_per_second": 11617032.75166012,
        "write_bytes": 555205394432,
        "write_bytes_per_second": 68751755.10672717,
        "read_requests": 1074648,
        "read_requests_per_second": 133.07496083952987,
        "write_requests": 77560274,
        "write_requests_per_second": 9604.382481755149
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/25/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425516.316885,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/25/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 70.81941771507263,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 3.5409708857536315,
        "operations_per_second": 282.40842194531854
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/26/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425576.320719,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/26/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 60.00247931480408,
        "count_iterations": 1,
        "count_operations": 17738,
        "msecs_per_operation": 3.382708271214572,
        "operations_per_second": 295.62111770310804
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/27/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425636.324029,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/27/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00239682197571,
        "count_iterations": 1,
        "count_operations": 16861,
        "msecs_per_operation": 3.5586499508911515,
        "operations_per_second": 281.0054413330487
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/28/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425696.325568,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/28/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00079703330994,
        "count_iterations": 1,
        "count_operations": 18770,
        "msecs_per_operation": 3.1966327668252497,
        "operations_per_second": 312.8291777454169
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/29/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425756.327844,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/29/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.00153112411499,
        "count_iterations": 1,
        "count_operations": 18064,
        "msecs_per_operation": 3.321608233177314,
        "operations_per_second": 301.0589840221588
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/30/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425816.328793,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/30/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00016713142395,
        "count_iterations": 1,
        "count_operations": 19468,
        "msecs_per_operation": 3.0819892711847108,
        "operations_per_second": 324.46576285958383
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/31/17-15:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425871.493206,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/31/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 55.16382098197937,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 2.773305564425085,
        "operations_per_second": 360.5805335076025
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/31/17-15:06:35",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425895.16785,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/31/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 23.67385983467102,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.367385983467102,
        "operations_per_second": 422.4068263407864
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:03",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425923.928484,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 28.7601420879364,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.8760142087936402,
        "operations_per_second": 347.70342821757316
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425940.454674,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 16.525513172149658,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.6525513172149657,
        "operations_per_second": 605.1249299085572
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:29",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425949.768239,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 9.312994003295898,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.9312994003295898,
        "operations_per_second": 1073.768542797404
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425974.575145,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 19.943549871444702,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.9971774935722351,
        "operations_per_second": 1002.8304955195626
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/33/17-15:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425994.763392,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 20.187196969985962,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.0093598484992983,
        "operations_per_second": 990.7269458823687
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/33/17-15:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426010.989317,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 16.22523808479309,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.8157075101700815,
        "operations_per_second": 1225.9296224837897
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/33/17-15:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426036.495655,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 25.50560212135315,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.2822684692249333,
        "operations_per_second": 779.8678857045043
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/34/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426056.667945,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/34/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 20.17164921760559,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.0141093568752497,
        "operations_per_second": 986.0869473498159
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/34/17-15:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426078.45924,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/34/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 21.79041600227356,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.0954912273024764,
        "operations_per_second": 912.8325038826529
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/34/17-15:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426094.481398,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/34/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 16.021307945251465,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.805455127708585,
        "operations_per_second": 1241.5340912222755
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:13",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426113.496395,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 19.01403284072876,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.901403284072876,
        "operations_per_second": 525.9273550101182
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426120.057365,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 6.56048583984375,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.6560485839843749,
        "operations_per_second": 1524.2773544707732
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426130.973476,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 10.915446043014526,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.0915446043014527,
        "operations_per_second": 916.1329697928031
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426133.359077,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 2.3849360942840576,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.23849360942840578,
        "operations_per_second": 4192.984467787987
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/36/17-15:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426177.139819,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/36/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 29.146613121032715,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.4573306560516357,
        "operations_per_second": 686.1860730421417
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/36/17-15:06:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426202.280877,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/36/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 25.139961004257202,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.2569980502128602,
        "operations_per_second": 795.5461822957163
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/37/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426256.635103,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/37/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 54.35343790054321,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 2.7325643708482836,
        "operations_per_second": 365.95661228268335
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/38/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426316.636609,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/38/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00075602531433,
        "count_iterations": 1,
        "count_operations": 19718,
        "msecs_per_operation": 3.0429433018213983,
        "operations_per_second": 328.6291924668578
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/39/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426376.638349,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/39/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.000986099243164,
        "count_iterations": 1,
        "count_operations": 18849,
        "msecs_per_operation": 3.183245058053115,
        "operations_per_second": 314.144837033566
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/40/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426436.640318,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/40/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00122880935669,
        "count_iterations": 1,
        "count_operations": 19810,
        "msecs_per_operation": 3.028835376545012,
        "operations_per_second": 330.1599049403268
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/41/17-15:06:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426491.563444,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/41/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 54.92257213592529,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 2.761177021563787,
        "operations_per_second": 362.16439300717195
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/41/17-15:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426503.156969,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/41/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 11.592965841293335,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.1592965841293335,
        "operations_per_second": 862.5920352823518
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/42/17-15:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426526.872953,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 23.715476036071777,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.3715476036071776,
        "operations_per_second": 421.66558178253615
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/42/17-15:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426534.913575,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 8.040103197097778,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.8040103197097779,
        "operations_per_second": 1243.765130229881
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/42/17-15:06:32",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426552.525918,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 17.611711978912354,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.7611711978912352,
        "operations_per_second": 567.8039711286245
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/43/17-15:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426586.381154,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/43/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 29.725871086120605,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.4862935543060303,
        "operations_per_second": 672.8145978315252
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/43/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426616.694564,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/43/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 30.312135934829712,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.5156067967414857,
        "operations_per_second": 659.8017389140597
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/44/17-15:06:02",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426642.841639,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 26.146384239196777,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.3144831451006374,
        "operations_per_second": 760.7552852444065
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/44/17-15:06:39",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426679.653999,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 36.81169891357422,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.8506711031911025,
        "operations_per_second": 540.3445259807133
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/45/17-15:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426718.985459,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/45/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 39.33079123497009,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.9773159335865513,
        "operations_per_second": 505.7360753605781
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/45/17-15:06:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426751.246878,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/45/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 32.26072382926941,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.621875412461385,
        "operations_per_second": 616.5701707521316
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/46/17-15:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426775.448594,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 24.200888872146606,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.216675324123805,
        "operations_per_second": 821.9119597252908
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/46/17-15:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426787.612601,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 12.163380146026611,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.216338014602661,
        "operations_per_second": 822.1398887435645
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/46/17-15:06:52",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426812.817876,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 25.20466709136963,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.520466709136963,
        "operations_per_second": 396.7519175614946
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/47/17-15:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426827.317011,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/47/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 14.49861478805542,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.4498614788055422,
        "operations_per_second": 689.7210627485895
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/47/17-15:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426839.620928,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/47/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.30331301689148,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.230331301689148,
        "operations_per_second": 812.7892045232685
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/50/17-15:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427008.246904,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/50/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 53.235421895980835,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.661771094799042,
        "operations_per_second": 375.6897059833381
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/50/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427059.643635,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/50/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 51.39528012275696,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.569764006137848,
        "operations_per_second": 389.14079176590263
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/51/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427119.646272,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/51/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.001725912094116,
        "count_iterations": 1,
        "count_operations": 5077,
        "msecs_per_operation": 11.818342704765437,
        "operations_per_second": 84.61423272120687
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/52/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427179.672255,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/52/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.02501583099365,
        "count_iterations": 1,
        "count_operations": 1077,
        "msecs_per_operation": 55.73353373351314,
        "operations_per_second": 17.94251921619479
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/53/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427239.725614,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/53/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.05255079269409,
        "count_iterations": 1,
        "count_operations": 2377,
        "msecs_per_operation": 25.264009588849007,
        "operations_per_second": 39.581998909681325
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/54/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427299.727933,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00136876106262,
        "count_iterations": 1,
        "count_operations": 11737,
        "msecs_per_operation": 5.1121554708241135,
        "operations_per_second": 195.61220422719134
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/55/17-15:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427318.638804,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/55/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 18.910127878189087,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 1.5457027855312315,
        "operations_per_second": 646.9549057947238
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/55/17-15:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427341.11921,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/55/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 22.47978687286377,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.247978687286377,
        "operations_per_second": 444.8440751042614
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/56/17-15:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427368.582343,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 27.462587118148804,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.74625871181488,
        "operations_per_second": 364.13175339156027
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/56/17-15:06:24",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427384.822782,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 16.239811897277832,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.6239811897277832,
        "operations_per_second": 615.7706790727195
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/56/17-15:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427393.791222,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 8.967884063720703,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.8967884063720704,
        "operations_per_second": 1115.0902407909898
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/57/17-15:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427426.94602,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/57/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 27.239474773406982,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.3619737386703492,
        "operations_per_second": 734.2285475902551
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/57/17-15:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427447.349618,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/57/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 20.402307987213135,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.0201153993606569,
        "operations_per_second": 980.2812511474057
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/58/17-15:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427480.066055,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/58/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 32.715548276901245,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 2.67414976924156,
        "operations_per_second": 373.9506333946356
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/59/17-15:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427540.071428,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/59/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00463891029358,
        "count_iterations": 1,
        "count_operations": 7734,
        "msecs_per_operation": 7.758551708080369,
        "operations_per_second": 128.89003484484365
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/00/17-16:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427600.083675,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/00/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.011439085006714,
        "count_iterations": 1,
        "count_operations": 8270,
        "msecs_per_operation": 7.256522259372033,
        "operations_per_second": 137.8070602220599
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/00/17-16:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427656.047702,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/00/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 55.96318793296814,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 4.574398228949497,
        "operations_per_second": 218.60798949934195
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/01/17-16:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427676.381485,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 20.33301091194153,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 1.6620084119618708,
        "operations_per_second": 601.6816718873151
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/01/17-16:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427709.974454,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 33.59233570098877,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 3.359233570098877,
        "operations_per_second": 297.6869512442285
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/01/17-16:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427714.818106,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 4.842984199523926,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.48429841995239253,
        "operations_per_second": 2064.8425821796027
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/02/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427737.724194,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 22.905461072921753,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.290546107292175,
        "operations_per_second": 436.577110068382
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/02/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427739.567414,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 1.8425629138946533,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.18425629138946534,
        "operations_per_second": 5427.2230948482775
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/03/17-16:06:23",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427803.012463,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/03/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 52.37925481796265,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.6189627408981324,
        "operations_per_second": 381.8305561907558
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/04/17-16:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427858.828549,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/04/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 55.814882040023804,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.79074410200119,
        "operations_per_second": 358.3273720019398
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/05/17-16:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427918.857672,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/05/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.02821326255798,
        "count_iterations": 1,
        "count_operations": 4476,
        "msecs_per_operation": 13.411128968399908,
        "operations_per_second": 74.56493799711113
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/06/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427979.027695,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/06/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.168986082077026,
        "count_iterations": 1,
        "count_operations": 486,
        "msecs_per_operation": 123.80449811126961,
        "operations_per_second": 8.077250950133068
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/07/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428039.06826,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/07/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.039880990982056,
        "count_iterations": 1,
        "count_operations": 624,
        "msecs_per_operation": 96.21775799836868,
        "operations_per_second": 10.393091886603244
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/08/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428099.069462,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/08/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00030994415283,
        "count_iterations": 1,
        "count_operations": 4422,
        "msecs_per_operation": 13.568591122603534,
        "operations_per_second": 73.69961928723227
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/08/17-16:06:40",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428120.212597,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/08/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 21.1422758102417,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 1.7281572511232384,
        "operations_per_second": 578.6510454127001
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/08/17-16:06:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428130.250222,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/08/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 10.036992073059082,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.0036992073059081,
        "operations_per_second": 996.3144263948983
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/09/17-16:06:10",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428150.592461,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/09/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 20.341625213623047,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.0341625213623047,
        "operations_per_second": 491.6028043473573
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/09/17-16:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428158.213163,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/09/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 7.62016487121582,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.762016487121582,
        "operations_per_second": 1312.3075640756406
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/09/17-16:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428170.423471,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/09/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.20976209640503,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.220976209640503,
        "operations_per_second": 819.0167769889915
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/10/17-16:06:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428209.165885,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/10/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 32.42407774925232,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.6212038874626158,
        "operations_per_second": 616.8255626163858
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/10/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428234.871707,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/10/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 25.704694032669067,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.2852347016334533,
        "operations_per_second": 778.0680048002612
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/11/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428294.91956,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/11/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.04704523086548,
        "count_iterations": 1,
        "count_operations": 4851,
        "msecs_per_operation": 12.378281845158828,
        "operations_per_second": 80.78665621845587
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/12/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428354.922022,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/12/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00144410133362,
        "count_iterations": 1,
        "count_operations": 2155,
        "msecs_per_operation": 27.842897494818384,
        "operations_per_second": 35.91580223236831
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/13/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428414.977799,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/13/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.05490303039551,
        "count_iterations": 1,
        "count_operations": 2074,
        "msecs_per_operation": 28.956076678107767,
        "operations_per_second": 34.535065337634286
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/14/17-16:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428476.252478,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/14/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 61.27371859550476,
        "count_iterations": 1,
        "count_operations": 480,
        "msecs_per_operation": 127.6535804073016,
        "operations_per_second": 7.8337011528334815
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/15/17-16:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428536.266879,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/15/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.01374077796936,
        "count_iterations": 1,
        "count_operations": 7939,
        "msecs_per_operation": 7.559357699706432,
        "operations_per_second": 132.28637137237666
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/15/17-16:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428549.915724,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/15/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 13.647822856903076,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.3647822856903078,
        "operations_per_second": 732.7175993453047
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/16/17-16:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428574.477961,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/16/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 24.56161904335022,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.456161904335022,
        "operations_per_second": 407.1392843586745
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/16/17-16:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428590.077237,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/16/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 15.598605871200562,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.5598605871200562,
        "operations_per_second": 641.0829328320185
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/16/17-16:06:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428602.64329,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/16/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.565415143966675,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.2565415143966676,
        "operations_per_second": 795.8352259297643
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/26/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429175.308279,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/26/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 120.08435106277466,
        "count_iterations": 1,
        "count_operations": 5713,
        "msecs_per_operation": 21.019490821420383,
        "operations_per_second": 47.57489172767818
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/27/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429235.315282,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/27/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 60.00564908981323,
        "count_iterations": 1,
        "count_operations": 3069,
        "msecs_per_operation": 19.55218282496358,
        "operations_per_second": 51.145184604310934
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/28/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429295.320279,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/28/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00415587425232,
        "count_iterations": 1,
        "count_operations": 1849,
        "msecs_per_operation": 32.45222059180763,
        "operations_per_second": 30.814532311309502
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/29/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429355.352503,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/29/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.031386852264404,
        "count_iterations": 1,
        "count_operations": 1737,
        "msecs_per_operation": 34.5603839103422,
        "operations_per_second": 28.934863761763648
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/30/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429415.381808,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/30/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.02854919433594,
        "count_iterations": 1,
        "count_operations": 1737,
        "msecs_per_operation": 34.55875025580653,
        "operations_per_second": 28.93623156502834
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/31/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429475.383507,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/31/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.000826835632324,
        "count_iterations": 1,
        "count_operations": 2344,
        "msecs_per_operation": 25.59762237015031,
        "operations_per_second": 39.06612831221824
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/32/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429535.387565,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00339102745056,
        "count_iterations": 1,
        "count_operations": 2444,
        "msecs_per_operation": 24.551305657712994,
        "operations_per_second": 40.73103133257769
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/32/17-16:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429561.560706,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 26.17245388031006,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.617245388031006,
        "operations_per_second": 382.08110121165043
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/33/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429597.512675,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 35.951366901397705,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 3.5951366901397703,
        "operations_per_second": 278.15354079377784
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/33/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429614.31567,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 16.802326917648315,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.6802326917648314,
        "operations_per_second": 595.1556620111054
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/33/17-16:06:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429624.275333,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 9.958865880966187,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.9958865880966186,
        "operations_per_second": 1004.1304019479197
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/36/17-16:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429771.990175,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/36/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 116.9851016998291,
        "count_iterations": 1,
        "count_operations": 17025,
        "msecs_per_operation": 6.871371612324764,
        "operations_per_second": 145.53135187832956
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/37/17-16:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429831.995435,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/37/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 60.003976821899414,
        "count_iterations": 1,
        "count_operations": 8188,
        "msecs_per_operation": 7.328282464814291,
        "operations_per_second": 136.45762220566118
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/38/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429892.011588,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/38/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.01518416404724,
        "count_iterations": 1,
        "count_operations": 4063,
        "msecs_per_operation": 14.771150421867398,
        "operations_per_second": 67.69953398616721
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/39/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429952.036964,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/39/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.02449417114258,
        "count_iterations": 1,
        "count_operations": 3523,
        "msecs_per_operation": 17.03789218596156,
        "operations_per_second": 58.6927061801667
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/40/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430012.051649,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/40/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.01379680633545,
        "count_iterations": 1,
        "count_operations": 3579,
        "msecs_per_operation": 16.768314279501382,
        "operations_per_second": 59.636286828334406
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/41/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430072.054048,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/41/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.001506090164185,
        "count_iterations": 1,
        "count_operations": 4024,
        "msecs_per_operation": 14.910911056203824,
        "operations_per_second": 67.06498323480648
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/42/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430132.112745,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.057862997055054,
        "count_iterations": 1,
        "count_operations": 4640,
        "msecs_per_operation": 12.943504956261865,
        "operations_per_second": 77.25882621277289
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/44/17-16:06:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430271.213442,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 139.1000120639801,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 13.91000120639801,
        "operations_per_second": 71.89071986133563
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/44/17-16:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430283.034697,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 11.82052206993103,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.182052206993103,
        "operations_per_second": 845.9863228408445
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/46/17-16:06:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430404.638124,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 121.60276508331299,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 12.160276508331298,
        "operations_per_second": 82.23497215008852
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/46/17-16:06:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430410.7399,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 6.101037263870239,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.6101037263870239,
        "operations_per_second": 1639.0655502497987
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/48/17-16:06:39",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430519.908419,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/48/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 43.51984405517578,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.1759922027587892,
        "operations_per_second": 459.56047026830777
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/49/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430557.399838,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 37.49023795127869,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.8745118975639343,
        "operations_per_second": 533.4722075114985
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/50/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430617.447753,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/50/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.04708290100098,
        "count_iterations": 1,
        "count_operations": 1463,
        "msecs_per_operation": 41.04380239302869,
        "operations_per_second": 24.364214368448728
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/51/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430677.513361,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/51/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.06486701965332,
        "count_iterations": 1,
        "count_operations": 1452,
        "msecs_per_operation": 41.366988305546364,
        "operations_per_second": 24.17386522349085
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/52/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430737.588559,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/52/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.074410915374756,
        "count_iterations": 1,
        "count_operations": 1472,
        "msecs_per_operation": 40.81142045881437,
        "operations_per_second": 24.502945223608897
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/53/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430797.615678,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/53/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.02626395225525,
        "count_iterations": 1,
        "count_operations": 1827,
        "msecs_per_operation": 32.85509794868924,
        "operations_per_second": 30.436676876195254
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430857.643558,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.026942014694214,
        "count_iterations": 1,
        "count_operations": 2028,
        "msecs_per_operation": 29.599083833675646,
        "operations_per_second": 33.78482947712976
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:29",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430869.333156,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 11.688395023345947,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.1688395023345948,
        "operations_per_second": 855.549455680304
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430891.330802,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 21.99705219268799,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.199705219268799,
        "operations_per_second": 454.60636781705176
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430899.13064,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 7.799257040023804,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.7799257040023804,
        "operations_per_second": 1282.1734107085513
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/55/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430912.520089,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/55/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 13.388848066329956,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.3388848066329957,
        "operations_per_second": 746.8902440642244
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/56/17-16:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430987.667018,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 36.50671911239624,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.825335955619812,
        "operations_per_second": 547.8443554027508
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/57/17-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431027.401481,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/57/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 39.73330569267273,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.9866652846336363,
        "operations_per_second": 503.3560548597452
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/58/17-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431087.407277,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/58/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00496578216553,
        "count_iterations": 1,
        "count_operations": 7958,
        "msecs_per_operation": 7.540206808515396,
        "operations_per_second": 132.62235710440567
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/59/17-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431147.410184,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/59/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.001996994018555,
        "count_iterations": 1,
        "count_operations": 5448,
        "msecs_per_operation": 11.01358241446743,
        "operations_per_second": 90.79697798296775
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/00/17-17:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431207.421619,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/00/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.01051473617554,
        "count_iterations": 1,
        "count_operations": 5010,
        "msecs_per_operation": 11.978146653927253,
        "operations_per_second": 83.48536955607668
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/01/17-17:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431267.424429,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.001874923706055,
        "count_iterations": 1,
        "count_operations": 3084,
        "msecs_per_operation": 19.455860870203,
        "operations_per_second": 51.39839386554814
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/02/17-17:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431327.42562,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00018906593323,
        "count_iterations": 1,
        "count_operations": 12873,
        "msecs_per_operation": 4.66093288789973,
        "operations_per_second": 214.54932393386412
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/02/17-17:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431340.840244,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 13.413640022277832,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.341364002227783,
        "operations_per_second": 745.5097932695121
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/02/17-17:06:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431373.179876,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 32.338947057724,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 3.2338947057724,
        "operations_per_second": 309.22466282375603
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/03/17-17:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431388.57615,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/03/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 15.395525693893433,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.5395525693893433,
        "operations_per_second": 649.5393661007922
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/03/17-17:06:21",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431401.286281,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/03/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.709406852722168,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.2709406852722167,
        "operations_per_second": 786.8187804419957
    },
    {
        "database": "Parsing in Python",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.022082805633544922,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.0022082805633544924,
        "operations_per_second": 452841.00969532074,
        "benchmark_code": "            func=lambda: g.add_edges_stream(yield_edges_from_csv(p)),\n",
        "date": "2020/57/05-06:09:05",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274625.559672,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/57/05",
        "bytes_sent": 0,
        "bytes_sent_per_second": 0.0,
        "bytes_recv": 0,
        "bytes_recv_per_second": 0.0,
        "packets_sent": 0,
        "packets_sent_per_second": 0.0,
        "packets_recv": 0,
        "packets_recv_per_second": 0.0,
        "read_bytes": 0,
        "read_bytes_per_second": 0.0,
        "write_bytes": 0,
        "write_bytes_per_second": 0.0,
        "read_requests": 0,
        "read_requests_per_second": 0.0,
        "write_requests": 0,
        "write_requests_per_second": 0.0
    },
    {
        "database": "SQLite (In-Memory)",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.3459761142730713,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.03459761142730713,
        "operations_per_second": 28903.729441007657,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/06/03-03:09:32",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599087992.825369,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/06/03",
        "bytes_sent": 1024,
        "bytes_sent_per_second": 2959.741894759184,
        "bytes_recv": 1024,
        "bytes_recv_per_second": 2959.741894759184,
        "packets_sent": 4,
        "packets_sent_per_second": 11.561491776403063,
        "packets_recv": 3,
        "packets_recv_per_second": 8.671118832302296,
        "read_bytes": 659456,
        "read_bytes_per_second": 1906073.7802249144,
        "write_bytes": 0,
        "write_bytes_per_second": 0.0,
        "read_requests": 12,
        "read_requests_per_second": 34.684475329209185,
        "write_requests": 0,
        "write_requests_per_second": 0.0
    },
    {
        "database": "Parsing in Python",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 9.94016981124878,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.0035352668178372073,
        "operations_per_second": 282864.08113653393,
        "benchmark_code": "            func=lambda: g.add_edges_stream(yield_edges_from_csv(p)),\n",
        "date": "2020/57/05-06:09:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274637.370043,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/57/05",
        "bytes_sent": 21504,
        "bytes_sent_per_second": 2163.3433239405053,
        "bytes_recv": 19456,
        "bytes_recv_per_second": 1957.310626422362,
        "packets_sent": 61,
        "packets_sent_per_second": 6.136716088186888,
        "packets_recv": 65,
        "packets_recv_per_second": 6.5391237005270115,
        "read_bytes": 138514432,
        "read_bytes_per_second": 13934815.463942109,
        "write_bytes": 966656,
        "write_bytes_per_second": 97247.43322856366,
        "read_requests": 510,
        "read_requests_per_second": 51.30697057336578,
        "write_requests": 159,
        "write_requests_per_second": 15.995702590519919
    },
    {
        "database": "MongoDB",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.37868499755859375,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.037868499755859375,
        "operations_per_second": 26407.172358214968,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/28/03-02:09:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599085697.157858,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/28/03",
        "bytes_sent": 1331200,
        "bytes_sent_per_second": 3515322.784325577,
        "bytes_recv": 1331200,
        "bytes_recv_per_second": 3515322.784325577,
        "packets_sent": 148,
        "packets_sent_per_second": 390.82615090158157,
        "packets_recv": 148,
        "packets_recv_per_second": 390.82615090158157,
        "read_bytes": 13344768,
        "read_bytes_per_second": 35239758.865639165,
        "write_bytes": 1388544,
        "write_bytes_per_second": 3666752.0734965247,
        "read_requests": 65,
        "read_requests_per_second": 171.6466203283973,
        "write_requests": 194,
        "write_requests_per_second": 512.2991437493704
    },
    {
        "database": "SQLite",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.4207620620727539,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.04207620620727539,
        "operations_per_second": 23766.401254756904,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/28/03-02:09:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599085697.812218,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/28/03",
        "bytes_sent": 6144,
        "bytes_sent_per_second": 14602.07693092264,
        "bytes_recv": 1024,
        "bytes_recv_per_second": 2433.679488487107,
        "packets_sent": 11,
        "packets_sent_per_second": 26.143041380232592,
        "packets_recv": 9,
        "packets_recv_per_second": 21.38976112928121,
        "read_bytes": 5189632,
        "read_bytes_per_second": 12333887.647652658,
        "write_bytes": 3379200,
        "write_bytes_per_second": 8031142.312007452,
        "read_requests": 32,
        "read_requests_per_second": 76.05248401522209,
        "write_requests": 43,
        "write_requests_per_second": 102.19552539545468
    },
    {
        "database": "MySQL",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.8555810451507568,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08555810451507569,
        "operations_per_second": 11687.963468426255,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/33/03-02:09:58",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599086038.11643,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/33/03",
        "bytes_sent": 651264,
        "bytes_sent_per_second": 761194.9840301157,
        "bytes_recv": 652288,
        "bytes_recv_per_second": 762391.8314892825,
        "packets_sent": 246,
        "packets_sent_per_second": 287.5239013232859,
        "packets_recv": 248,
        "packets_recv_per_second": 289.8614940169711,
        "read_bytes": 8671232,
        "read_bytes_per_second": 10134904.284224873,
        "write_bytes": 39669760,
        "write_bytes_per_second": 46365870.56812371,
        "read_requests": 1253,
        "read_requests_per_second": 1464.5018225938097,
        "write_requests": 4001,
        "write_requests_per_second": 4676.354183717344
    },
    {
        "database": "PostgreSQL",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 2.1302032470703125,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.21302032470703125,
        "operations_per_second": 4694.38773682891,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/34/03-02:09:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599086040.802085,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/34/03",
        "bytes_sent": 5995520,
        "bytes_sent_per_second": 2814529.5563912466,
        "bytes_recv": 5996544,
        "bytes_recv_per_second": 2815010.261695498,
        "packets_sent": 66457,
        "packets_sent_per_second": 31197.49258264389,
        "packets_recv": 66468,
        "packets_recv_per_second": 31202.6564091544,
        "read_bytes": 6262784,
        "read_bytes_per_second": 2939993.640800831,
        "write_bytes": 16789504,
        "write_bytes_per_second": 7881644.168503993,
        "read_requests": 85,
        "read_requests_per_second": 39.902295763045736,
        "write_requests": 374,
        "write_requests_per_second": 175.57010135740123
    },
    {
        "database": "MongoDB",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 72.49415612220764,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.025782877907772242,
        "operations_per_second": 38785.42975602232,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/53/03-05:09:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599098024.142391,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/53/03",
        "bytes_sent": 404142080,
        "bytes_sent_per_second": 5574822.877015273,
        "bytes_recv": 404018176,
        "bytes_recv_per_second": 5573113.718558541,
        "packets_sent": 39083,
        "packets_sent_per_second": 539.1193178953004,
        "packets_recv": 38675,
        "packets_recv_per_second": 533.4912780390641,
        "read_bytes": 700755968,
        "read_bytes_per_second": 9666378.719116265,
        "write_bytes": 455946240,
        "write_bytes_per_second": 6289420.615247727,
        "read_requests": 6378,
        "read_requests_per_second": 87.97950539969362,
        "write_requests": 14918,
        "write_requests_per_second": 205.78210435130597
    },
    {
        "database": "SQLite",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 67.41530895233154,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.02397656270255205,
        "operations_per_second": 41707.39619376553,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/36/03-02:09:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599086174.50887,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/36/03",
        "bytes_sent": 319488,
        "bytes_sent_per_second": 4739.101621946221,
        "bytes_recv": 280576,
        "bytes_recv_per_second": 4161.903347478412,
        "packets_sent": 2101,
        "packets_sent_per_second": 31.16502813160122,
        "packets_recv": 864,
        "packets_recv_per_second": 12.816080107426679,
        "read_bytes": 619663360,
        "read_bytes_per_second": 9191730.626617104,
        "write_bytes": 2350174208,
        "write_bytes_per_second": 34861135.31960191,
        "read_requests": 6330,
        "read_requests_per_second": 93.89558689816074,
        "write_requests": 10564,
        "write_requests_per_second": 156.70031279497158
    },
    {
        "database": "SQLite (In-Memory)",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 54.68755912780762,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.019449880314344442,
        "operations_per_second": 51414.198125553085,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/37/03-02:09:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599086229.205586,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/37/03",
        "bytes_sent": 136192,
        "bytes_sent_per_second": 2490.3653074314825,
        "bytes_recv": 60416,
        "bytes_recv_per_second": 1104.7485198380261,
        "packets_sent": 576,
        "packets_sent_per_second": 10.532560040828638,
        "packets_recv": 324,
        "packets_recv_per_second": 5.924565022966109,
        "read_bytes": 255713280,
        "read_bytes_per_second": 4675894.921592405,
        "write_bytes": 1482956800,
        "write_bytes_per_second": 27116895.02422762,
        "read_requests": 3632,
        "read_requests_per_second": 66.41364247966948,
        "write_requests": 6446,
        "write_requests_per_second": 117.86958684580105
    },
    {
        "database": "MySQL",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 153.2326159477234,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.05449788010234437,
        "operations_per_second": 18349.337591151227,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/39/03-02:09:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599086382.615667,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/39/03",
        "bytes_sent": 104904704,
        "bytes_sent_per_second": 684610.80137005,
        "bytes_recv": 104636416,
        "bytes_recv_per_second": 682859.9469691075,
        "packets_sent": 25247,
        "packets_sent_per_second": 164.76257253621012,
        "packets_recv": 24807,
        "packets_recv_per_second": 161.89112119878655,
        "read_bytes": 656719872,
        "read_bytes_per_second": 4285770.806288692,
        "write_bytes": 9995792384,
        "write_bytes_per_second": 65232798.658284016,
        "read_requests": 10354,
        "read_requests_per_second": 67.5704707901897,
        "write_requests": 1273917,
        "write_requests_per_second": 8313.61516685591
    },
    {
        "database": "PostgreSQL",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 451.24164509773254,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.16048615315756617,
        "operations_per_second": 6231.067168880261,
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(yield_edges_from_csv(\n                dataset_path), upsert=False)\n            return g.number_of_edges()\n",
        "date": "2020/47/03-02:09:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599086837.492261,
        "date_readable": "Sep 03, 2020",
        "date_sortable": "2020/47/03",
        "bytes_sent": 1054210048,
        "bytes_sent_per_second": 2336242.8079342567,
        "bytes_recv": 1053353984,
        "bytes_recv_per_second": 2334345.6780720195,
        "packets_sent": 11503320,
        "packets_sent_per_second": 25492.59387951337,
        "packets_recv": 11500634,
        "packets_recv_per_second": 25486.641414732734,
        "read_bytes": 1053339648,
        "read_bytes_per_second": 2334313.907954709,
        "write_bytes": 7166586880,
        "write_bytes_per_second": 15881927.029247973,
        "read_requests": 22383,
        "read_requests_per_second": 49.60313446945297,
        "write_requests": 411568,
        "write_requests_per_second": 912.0789370202305
    },
    {
        "database": "Sampling in Unum",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.002647876739501953,
        "count_iterations": 1,
        "count_operations": 1,
        "msecs_per_operation": 2.647876739501953,
        "operations_per_second": 377.6610840986854,
        "benchmark_code": "            func=lambda: pynum.sample_edges(p, 8),\n",
        "date": "2020/57/05-06:09:05",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274625.565831,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/57/05",
        "bytes_sent": 0,
        "bytes_sent_per_second": 0.0,
        "bytes_recv": 0,
        "bytes_recv_per_second": 0.0,
        "packets_sent": 0,
        "packets_sent_per_second": 0.0,
        "packets_recv": 0,
        "packets_recv_per_second": 0.0,
        "read_bytes": 0,
        "read_bytes_per_second": 0.0,
        "write_bytes": 0,
        "write_bytes_per_second": 0.0,
        "read_requests": 0,
        "read_requests_per_second": 0.0,
        "write_requests": 0,
        "write_requests_per_second": 0.0
    },
    {
        "database": "Sampling in Unum",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.6204583644866943,
        "count_iterations": 1,
        "count_operations": 1,
        "msecs_per_operation": 620.4583644866943,
        "operations_per_second": 1.6117116912869742,
        "benchmark_code": "            func=lambda: pynum.sample_edges(p, 8),\n",
        "date": "2020/57/05-06:09:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274637.991688,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/57/05",
        "bytes_sent": 2048,
        "bytes_sent_per_second": 3300.785543755723,
        "bytes_recv": 5120,
        "bytes_recv_per_second": 8251.963859389307,
        "packets_sent": 6,
        "packets_sent_per_second": 9.670270147721846,
        "packets_recv": 5,
        "packets_recv_per_second": 8.05855845643487,
        "read_bytes": 606208,
        "read_bytes_per_second": 977032.520951694,
        "write_bytes": 0,
        "write_bytes_per_second": 0.0,
        "read_requests": 22,
        "read_requests_per_second": 35.457657208313435,
        "write_requests": 0,
        "write_requests_per_second": 0.0
    },
    {
        "database": "Sampling in Unum",
        "dataset": "PatentCitations",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 3.886728048324585,
        "count_iterations": 1,
        "count_operations": 1,
        "msecs_per_operation": 3886.728048324585,
        "operations_per_second": 0.2572858166475168,
        "benchmark_code": "            func=lambda: pynum.sample_edges(p, 8),\n",
        "date": "2020/58/05-06:09:35",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274715.004997,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/58/05",
        "bytes_sent": 6144,
        "bytes_sent_per_second": 1580.7640574823433,
        "bytes_recv": 5120,
        "bytes_recv_per_second": 1317.303381235286,
        "packets_sent": 28,
        "packets_sent_per_second": 7.2040028661304705,
        "packets_recv": 41,
        "packets_recv_per_second": 10.548718482548189,
        "read_bytes": 4939776,
        "read_bytes_per_second": 1270934.3022158039,
        "write_bytes": 126976,
        "write_bytes_per_second": 32669.123854635094,
        "read_requests": 130,
        "read_requests_per_second": 33.44715616417719,
        "write_requests": 4,
        "write_requests_per_second": 1.0291432665900673
    },
    {
        "database": "Sampling in Unum",
        "dataset": "MouseGenes",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 3.736557960510254,
        "count_iterations": 1,
        "count_operations": 1,
        "msecs_per_operation": 3736.557960510254,
        "operations_per_second": 0.26762598374452695,
        "benchmark_code": "            func=lambda: pynum.sample_edges(p, 8),\n",
        "date": "2020/00/05-07:09:26",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599274826.722197,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/00/05",
        "bytes_sent": 2048,
        "bytes_sent_per_second": 548.0980147087912,
        "bytes_recv": 5120,
        "bytes_recv_per_second": 1370.245036771978,
        "packets_sent": 4,
        "packets_sent_per_second": 1.0705039349781078,
        "packets_recv": 34,
        "packets_recv_per_second": 9.099283447313917,
        "read_bytes": 1970176,
        "read_bytes_per_second": 527270.2901498572,
        "write_bytes": 299008,
        "write_bytes_per_second": 80022.31014748351,
        "read_requests": 40,
        "read_requests_per_second": 10.705039349781078,
        "write_requests": 59,
        "write_requests_per_second": 15.78993304092709
    },
    {
        "database": "Sampling in Unum",
        "dataset": "HumanBrain",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 24.112799167633057,
        "count_iterations": 1,
        "count_operations": 1,
        "msecs_per_operation": 24112.799167633057,
        "operations_per_second": 0.04147175087587151,
        "benchmark_code": "            func=lambda: pynum.sample_edges(p, 8),\n",
        "date": "2020/07/05-07:09:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599275256.225096,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/07/05",
        "bytes_sent": 36864,
        "bytes_sent_per_second": 1528.8146242881273,
        "bytes_recv": 38912,
        "bytes_recv_per_second": 1613.7487700819122,
        "packets_sent": 248,
        "packets_sent_per_second": 10.284994217216134,
        "packets_recv": 213,
        "packets_recv_per_second": 8.833482936560632,
        "read_bytes": 931606528,
        "read_bytes_per_second": 38635353.84355161,
        "write_bytes": 1757184,
        "write_bytes_per_second": 72873.4970910674,
        "read_requests": 2878,
        "read_requests_per_second": 119.3556990207582,
        "write_requests": 310,
        "write_requests_per_second": 12.856242771520167
    },
    {
        "database": "Parsing in Python",
        "dataset": "Wikipedia",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 2462.293276309967,
        "count_iterations": 1,
        "count_operations": 591044736,
        "msecs_per_operation": 0.004166001533105553,
        "operations_per_second": 240038.31780987084,
        "benchmark_code": "            def add(self, es, upsert=True) -> int:\n                self.count += len(es)\n                return len(es)\n",
        "date": "2020/26/05-15:09:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599305204.619472,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/26/05",
        "bytes_sent": 8768512,
        "bytes_sent_per_second": 3561.116006920441,
        "bytes_recv": 69233664,
        "bytes_recv_per_second": 28117.553934824,
        "packets_sent": 72465,
        "packets_sent_per_second": 29.42988176802287,
        "packets_recv": 64158,
        "packets_recv_per_second": 26.05619753636668,
        "read_bytes": 67074084864,
        "read_bytes_per_second": 27240493.855597217,
        "write_bytes": 39663505408,
        "write_bytes_per_second": 16108359.548233986,
        "read_requests": 473497,
        "read_requests_per_second": 192.29918895347444,
        "write_requests": 199337,
        "write_requests_per_second": 80.95583167035637
    },
    {
        "database": "Sampling in Unum",
        "dataset": "Wikipedia",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 178.07492995262146,
        "count_iterations": 1,
        "count_operations": 1,
        "msecs_per_operation": 178074.92995262146,
        "operations_per_second": 0.005615613608642494,
        "benchmark_code": "    def benchmark_parsing_speed_pynum(self, dataset: dict):\n        dataset_name = dataset['name']\n        print(f'-- Bulk importing: {dataset_name} -> PseudoGraph')\n        p = self.conf.normalize_path(dataset['path'])\n        counter = MicroBench(\n            benchmark_name='Sequential Writes: Import CSV',\n            func=lambda: pynum.sample_edges(p, 8),\n            database='Sampling in Unum',\n            dataset=dataset['name'],\n            source=self.conf.default_stats_file,\n            device_name=self.conf.device_name,\n            limit_iterations=1,\n            limit_seconds=None,\n            limit_operations=None,\n        )\n        counter.run_if_missing()\n",
        "date": "2020/29/05-15:09:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1599305382.703586,
        "date_readable": "Sep 05, 2020",
        "date_sortable": "2020/29/05",
        "bytes_sent": 271360,
        "bytes_sent_per_second": 1523.8529088412272,
        "bytes_recv": 248832,
        "bytes_recv_per_second": 1397.3443654657292,
        "packets_sent": 857,
        "packets_sent_per_second": 4.812580862606618,
        "packets_recv": 1056,
        "packets_recv_per_second": 5.930087970726474,
        "read_bytes": 27222183936,
        "read_bytes_per_second": 152869266.5679707,
        "write_bytes": 252276736,
        "write_bytes_per_second": 1416688.6718255098,
        "read_requests": 67815,
        "read_requests_per_second": 380.8228368700907,
        "write_requests": 5809,
        "write_requests_per_second": 32.62109945260425
    }
]