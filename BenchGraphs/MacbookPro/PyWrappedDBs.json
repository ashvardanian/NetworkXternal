[
    {
        "database": "Parsing in Python",
        "dataset": "PatentCitations",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 38.21909499168396,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.0023136520137563223,
        "operations_per_second": 432217.1156484562,
        "benchmark_code": "            func=lambda: export_edges_into_graph(p, g),\n",
        "date": "2020/25/30-19:08:13",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1598833513.903043,
        "date_readable": "Aug 30, 2020",
        "date_sortable": "2020/25/30",
        "bytes_sent": 30720,
        "bytes_sent_per_second": 803.7866937112018,
        "bytes_recv": 32768,
        "bytes_recv_per_second": 857.3724732919485,
        "packets_sent": 123,
        "packets_sent_per_second": 3.2182865666171163,
        "packets_recv": 137,
        "packets_recv_per_second": 3.5845956067198776,
        "read_bytes": 372895744,
        "read_bytes_per_second": 9756791.574503213,
        "write_bytes": 1462272,
        "write_bytes_per_second": 38260.246620653204,
        "read_requests": 3717,
        "read_requests_per_second": 97.2550501472831,
        "write_requests": 238,
        "write_requests_per_second": 6.227253681746941
    },
    {
        "database": "Parsing in Python",
        "dataset": "MouseGenes",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 35.97067213058472,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.002479676417620768,
        "operations_per_second": 403278.42491622065,
        "benchmark_code": "            func=lambda: export_edges_into_graph(p, g),\n",
        "date": "2020/25/30-19:08:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1598833549.874694,
        "date_readable": "Aug 30, 2020",
        "date_sortable": "2020/25/30",
        "bytes_sent": 14336,
        "bytes_sent_per_second": 398.546903654062,
        "bytes_recv": 16384,
        "bytes_recv_per_second": 455.4821756046423,
        "packets_sent": 57,
        "packets_sent_per_second": 1.584624268155799,
        "packets_recv": 70,
        "packets_recv_per_second": 1.9460298029983496,
        "read_bytes": 341147648,
        "read_bytes_per_second": 9484049.860439861,
        "write_bytes": 2347008,
        "write_bytes_per_second": 65247.821655365005,
        "read_requests": 941,
        "read_requests_per_second": 26.160200637449243,
        "write_requests": 266,
        "write_requests_per_second": 7.394913251393729
    },
    {
        "database": "Parsing in Python",
        "dataset": "HumanBrain",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 264.4100499153137,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.0030296554517260997,
        "operations_per_second": 330070.53638071794,
        "benchmark_code": "            func=lambda: export_edges_into_graph(p, g),\n",
        "date": "2020/30/30-19:08:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1598833828.946207,
        "date_readable": "Aug 30, 2020",
        "date_sortable": "2020/30/30",
        "bytes_sent": 928768,
        "bytes_sent_per_second": 3512.6047602860385,
        "bytes_recv": 1284096,
        "bytes_recv_per_second": 4856.456857109914,
        "packets_sent": 5410,
        "packets_sent_per_second": 20.460644373134592,
        "packets_recv": 2730,
        "packets_recv_per_second": 10.324872299197308,
        "read_bytes": 4401610752,
        "read_bytes_per_second": 16646911.694202868,
        "write_bytes": 1291186176,
        "write_bytes_per_second": 4883271.934684578,
        "read_requests": 25661,
        "read_requests_per_second": 97.05001760794948,
        "write_requests": 10958,
        "write_requests_per_second": 41.44320536798685
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/12/17-01:06:26",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592374346.343811,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/12/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 329.99657797813416,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.019976853123757472,
        "operations_per_second": 50057.934240441
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/30/17-01:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592375438.015308,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/30/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 1091.4240260124207,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.06607104109071968,
        "operations_per_second": 15135.223896758904
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/07/17-02:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592377634.875206,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/07/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 2196.0142891407013,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.1329391207042859,
        "operations_per_second": 7522.240215688146
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/25/17-02:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592378759.009144,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/25/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 1123.8194870948792,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.06803215042065812,
        "operations_per_second": 14698.932693098404
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/32/17-02:06:24",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592379144.171983,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 331.042875289917,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.02282079156313047,
        "operations_per_second": 43819.68948069318
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/48/17-02:06:47",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592380127.472189,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/48/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 982.8709580898285,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.06775525148631856,
        "operations_per_second": 14759.003591063702
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/21/17-03:06:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592382113.770178,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 1985.4644558429718,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.13687009715317316,
        "operations_per_second": 7306.197780227237
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/34/17-03:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592382896.206227,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/34/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 782.0227961540222,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.05390957051414597,
        "operations_per_second": 18549.58202157441
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/23/17-04:06:04",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592385784.141311,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 2513.070672750473,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.02879519241689189,
        "operations_per_second": 34728.019369420086
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/59/17-05:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592391554.506162,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/59/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 5770.100172042847,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.0661147919635972,
        "operations_per_second": 15125.208297571291
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/13/17-09:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592403239.355694,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/13/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 11684.110481023788,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.13387853082264256,
        "operations_per_second": 7469.4575288159085
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/13/17-11:06:46",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592410426.258699,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/13/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.add_edges_stream(dataset_path)\n                    return g.number_of_edges()\n",
        "time_elapsed": 7186.416281938553,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.08234318352846907,
        "operations_per_second": 12144.296068590344
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/25/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425516.316885,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/25/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 70.81941771507263,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 3.5409708857536315,
        "operations_per_second": 282.40842194531854
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/26/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425576.320719,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/26/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 60.00247931480408,
        "count_iterations": 1,
        "count_operations": 17738,
        "msecs_per_operation": 3.382708271214572,
        "operations_per_second": 295.62111770310804
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/27/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425636.324029,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/27/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00239682197571,
        "count_iterations": 1,
        "count_operations": 16861,
        "msecs_per_operation": 3.5586499508911515,
        "operations_per_second": 281.0054413330487
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/28/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425696.325568,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/28/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00079703330994,
        "count_iterations": 1,
        "count_operations": 18770,
        "msecs_per_operation": 3.1966327668252497,
        "operations_per_second": 312.8291777454169
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/29/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425756.327844,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/29/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.00153112411499,
        "count_iterations": 1,
        "count_operations": 18064,
        "msecs_per_operation": 3.321608233177314,
        "operations_per_second": 301.0589840221588
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/30/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425816.328793,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/30/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00016713142395,
        "count_iterations": 1,
        "count_operations": 19468,
        "msecs_per_operation": 3.0819892711847108,
        "operations_per_second": 324.46576285958383
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/31/17-15:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425871.493206,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/31/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 55.16382098197937,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 2.773305564425085,
        "operations_per_second": 360.5805335076025
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/31/17-15:06:35",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425895.16785,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/31/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 23.67385983467102,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.367385983467102,
        "operations_per_second": 422.4068263407864
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:03",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425923.928484,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 28.7601420879364,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.8760142087936402,
        "operations_per_second": 347.70342821757316
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425940.454674,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 16.525513172149658,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.6525513172149657,
        "operations_per_second": 605.1249299085572
    },
    {
        "database": "SQLite",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:29",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425949.768239,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 9.312994003295898,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.9312994003295898,
        "operations_per_second": 1073.768542797404
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/32/17-15:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425974.575145,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 19.943549871444702,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.9971774935722351,
        "operations_per_second": 1002.8304955195626
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/33/17-15:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425994.763392,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 20.187196969985962,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.0093598484992983,
        "operations_per_second": 990.7269458823687
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/33/17-15:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426010.989317,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 16.22523808479309,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.8157075101700815,
        "operations_per_second": 1225.9296224837897
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/33/17-15:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426036.495655,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 25.50560212135315,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.2822684692249333,
        "operations_per_second": 779.8678857045043
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/34/17-15:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426056.667945,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/34/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 20.17164921760559,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.0141093568752497,
        "operations_per_second": 986.0869473498159
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/34/17-15:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426078.45924,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/34/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 21.79041600227356,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.0954912273024764,
        "operations_per_second": 912.8325038826529
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/34/17-15:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426094.481398,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/34/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 16.021307945251465,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.805455127708585,
        "operations_per_second": 1241.5340912222755
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:13",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426113.496395,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 19.01403284072876,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.901403284072876,
        "operations_per_second": 525.9273550101182
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426120.057365,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 6.56048583984375,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.6560485839843749,
        "operations_per_second": 1524.2773544707732
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426130.973476,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 10.915446043014526,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.0915446043014527,
        "operations_per_second": 916.1329697928031
    },
    {
        "database": "MongoDB",
        "dataset": "PatentCitations",
        "date": "2020/35/17-15:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426133.359077,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/35/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 2.3849360942840576,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.23849360942840578,
        "operations_per_second": 4192.984467787987
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/36/17-15:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426177.139819,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/36/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 29.146613121032715,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.4573306560516357,
        "operations_per_second": 686.1860730421417
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/36/17-15:06:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426202.280877,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/36/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 25.139961004257202,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.2569980502128602,
        "operations_per_second": 795.5461822957163
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/37/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426256.635103,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/37/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 54.35343790054321,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 2.7325643708482836,
        "operations_per_second": 365.95661228268335
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/38/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426316.636609,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/38/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00075602531433,
        "count_iterations": 1,
        "count_operations": 19718,
        "msecs_per_operation": 3.0429433018213983,
        "operations_per_second": 328.6291924668578
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/39/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426376.638349,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/39/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.000986099243164,
        "count_iterations": 1,
        "count_operations": 18849,
        "msecs_per_operation": 3.183245058053115,
        "operations_per_second": 314.144837033566
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/40/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426436.640318,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/40/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00122880935669,
        "count_iterations": 1,
        "count_operations": 19810,
        "msecs_per_operation": 3.028835376545012,
        "operations_per_second": 330.1599049403268
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/41/17-15:06:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426491.563444,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/41/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 54.92257213592529,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 2.761177021563787,
        "operations_per_second": 362.16439300717195
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/41/17-15:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426503.156969,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/41/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 11.592965841293335,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.1592965841293335,
        "operations_per_second": 862.5920352823518
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/42/17-15:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426526.872953,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 23.715476036071777,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.3715476036071776,
        "operations_per_second": 421.66558178253615
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/42/17-15:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426534.913575,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 8.040103197097778,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.8040103197097779,
        "operations_per_second": 1243.765130229881
    },
    {
        "database": "PostgreSQL",
        "dataset": "PatentCitations",
        "date": "2020/42/17-15:06:32",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426552.525918,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 17.611711978912354,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.7611711978912352,
        "operations_per_second": 567.8039711286245
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/43/17-15:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426586.381154,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/43/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 29.725871086120605,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.4862935543060303,
        "operations_per_second": 672.8145978315252
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/43/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426616.694564,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/43/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 30.312135934829712,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.5156067967414857,
        "operations_per_second": 659.8017389140597
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/44/17-15:06:02",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426642.841639,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 26.146384239196777,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.3144831451006374,
        "operations_per_second": 760.7552852444065
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/44/17-15:06:39",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426679.653999,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 36.81169891357422,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.8506711031911025,
        "operations_per_second": 540.3445259807133
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/45/17-15:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426718.985459,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/45/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 39.33079123497009,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.9773159335865513,
        "operations_per_second": 505.7360753605781
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/45/17-15:06:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426751.246878,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/45/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 32.26072382926941,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.621875412461385,
        "operations_per_second": 616.5701707521316
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/46/17-15:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426775.448594,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 24.200888872146606,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 1.216675324123805,
        "operations_per_second": 821.9119597252908
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/46/17-15:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426787.612601,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 12.163380146026611,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.216338014602661,
        "operations_per_second": 822.1398887435645
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/46/17-15:06:52",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426812.817876,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 25.20466709136963,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.520466709136963,
        "operations_per_second": 396.7519175614946
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/47/17-15:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426827.317011,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/47/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 14.49861478805542,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.4498614788055422,
        "operations_per_second": 689.7210627485895
    },
    {
        "database": "MySQL",
        "dataset": "PatentCitations",
        "date": "2020/47/17-15:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426839.620928,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/47/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.30331301689148,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.230331301689148,
        "operations_per_second": 812.7892045232685
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/50/17-15:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427008.246904,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/50/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 53.235421895980835,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.661771094799042,
        "operations_per_second": 375.6897059833381
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/50/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427059.643635,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/50/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 51.39528012275696,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.569764006137848,
        "operations_per_second": 389.14079176590263
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/51/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427119.646272,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/51/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.001725912094116,
        "count_iterations": 1,
        "count_operations": 5077,
        "msecs_per_operation": 11.818342704765437,
        "operations_per_second": 84.61423272120687
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/52/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427179.672255,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/52/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.02501583099365,
        "count_iterations": 1,
        "count_operations": 1077,
        "msecs_per_operation": 55.73353373351314,
        "operations_per_second": 17.94251921619479
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/53/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427239.725614,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/53/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.05255079269409,
        "count_iterations": 1,
        "count_operations": 2377,
        "msecs_per_operation": 25.264009588849007,
        "operations_per_second": 39.581998909681325
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/54/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427299.727933,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00136876106262,
        "count_iterations": 1,
        "count_operations": 11737,
        "msecs_per_operation": 5.1121554708241135,
        "operations_per_second": 195.61220422719134
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/55/17-15:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427318.638804,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/55/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 18.910127878189087,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 1.5457027855312315,
        "operations_per_second": 646.9549057947238
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/55/17-15:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427341.11921,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/55/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 22.47978687286377,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.247978687286377,
        "operations_per_second": 444.8440751042614
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/56/17-15:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427368.582343,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 27.462587118148804,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.74625871181488,
        "operations_per_second": 364.13175339156027
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/56/17-15:06:24",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427384.822782,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 16.239811897277832,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.6239811897277832,
        "operations_per_second": 615.7706790727195
    },
    {
        "database": "SQLite",
        "dataset": "MouseGenes",
        "date": "2020/56/17-15:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427393.791222,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 8.967884063720703,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.8967884063720704,
        "operations_per_second": 1115.0902407909898
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/57/17-15:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427426.94602,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/57/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 27.239474773406982,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.3619737386703492,
        "operations_per_second": 734.2285475902551
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/57/17-15:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427447.349618,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/57/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 20.402307987213135,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.0201153993606569,
        "operations_per_second": 980.2812511474057
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/58/17-15:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427480.066055,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/58/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 32.715548276901245,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 2.67414976924156,
        "operations_per_second": 373.9506333946356
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/59/17-15:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427540.071428,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/59/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00463891029358,
        "count_iterations": 1,
        "count_operations": 7734,
        "msecs_per_operation": 7.758551708080369,
        "operations_per_second": 128.89003484484365
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/00/17-16:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427600.083675,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/00/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.011439085006714,
        "count_iterations": 1,
        "count_operations": 8270,
        "msecs_per_operation": 7.256522259372033,
        "operations_per_second": 137.8070602220599
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/00/17-16:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427656.047702,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/00/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 55.96318793296814,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 4.574398228949497,
        "operations_per_second": 218.60798949934195
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/01/17-16:06:16",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427676.381485,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 20.33301091194153,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 1.6620084119618708,
        "operations_per_second": 601.6816718873151
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/01/17-16:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427709.974454,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 33.59233570098877,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 3.359233570098877,
        "operations_per_second": 297.6869512442285
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/01/17-16:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427714.818106,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 4.842984199523926,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.48429841995239253,
        "operations_per_second": 2064.8425821796027
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/02/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427737.724194,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 22.905461072921753,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.290546107292175,
        "operations_per_second": 436.577110068382
    },
    {
        "database": "MongoDB",
        "dataset": "MouseGenes",
        "date": "2020/02/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427739.567414,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 1.8425629138946533,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.18425629138946534,
        "operations_per_second": 5427.2230948482775
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/03/17-16:06:23",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427803.012463,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/03/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 52.37925481796265,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.6189627408981324,
        "operations_per_second": 381.8305561907558
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/04/17-16:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427858.828549,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/04/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 55.814882040023804,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.79074410200119,
        "operations_per_second": 358.3273720019398
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/05/17-16:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427918.857672,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/05/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.02821326255798,
        "count_iterations": 1,
        "count_operations": 4476,
        "msecs_per_operation": 13.411128968399908,
        "operations_per_second": 74.56493799711113
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/06/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592427979.027695,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/06/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.168986082077026,
        "count_iterations": 1,
        "count_operations": 486,
        "msecs_per_operation": 123.80449811126961,
        "operations_per_second": 8.077250950133068
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/07/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428039.06826,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/07/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.039880990982056,
        "count_iterations": 1,
        "count_operations": 624,
        "msecs_per_operation": 96.21775799836868,
        "operations_per_second": 10.393091886603244
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/08/17-16:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428099.069462,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/08/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00030994415283,
        "count_iterations": 1,
        "count_operations": 4422,
        "msecs_per_operation": 13.568591122603534,
        "operations_per_second": 73.69961928723227
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/08/17-16:06:40",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428120.212597,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/08/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 21.1422758102417,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 1.7281572511232384,
        "operations_per_second": 578.6510454127001
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/08/17-16:06:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428130.250222,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/08/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 10.036992073059082,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.0036992073059081,
        "operations_per_second": 996.3144263948983
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/09/17-16:06:10",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428150.592461,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/09/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 20.341625213623047,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.0341625213623047,
        "operations_per_second": 491.6028043473573
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/09/17-16:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428158.213163,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/09/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 7.62016487121582,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.762016487121582,
        "operations_per_second": 1312.3075640756406
    },
    {
        "database": "PostgreSQL",
        "dataset": "MouseGenes",
        "date": "2020/09/17-16:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428170.423471,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/09/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.20976209640503,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.220976209640503,
        "operations_per_second": 819.0167769889915
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/10/17-16:06:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428209.165885,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/10/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 32.42407774925232,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.6212038874626158,
        "operations_per_second": 616.8255626163858
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/10/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428234.871707,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/10/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 25.704694032669067,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.2852347016334533,
        "operations_per_second": 778.0680048002612
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/11/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428294.91956,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/11/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.04704523086548,
        "count_iterations": 1,
        "count_operations": 4851,
        "msecs_per_operation": 12.378281845158828,
        "operations_per_second": 80.78665621845587
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/12/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428354.922022,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/12/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00144410133362,
        "count_iterations": 1,
        "count_operations": 2155,
        "msecs_per_operation": 27.842897494818384,
        "operations_per_second": 35.91580223236831
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/13/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428414.977799,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/13/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.05490303039551,
        "count_iterations": 1,
        "count_operations": 2074,
        "msecs_per_operation": 28.956076678107767,
        "operations_per_second": 34.535065337634286
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/14/17-16:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428476.252478,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/14/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 61.27371859550476,
        "count_iterations": 1,
        "count_operations": 480,
        "msecs_per_operation": 127.6535804073016,
        "operations_per_second": 7.8337011528334815
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/15/17-16:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428536.266879,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/15/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.01374077796936,
        "count_iterations": 1,
        "count_operations": 7939,
        "msecs_per_operation": 7.559357699706432,
        "operations_per_second": 132.28637137237666
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/15/17-16:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428549.915724,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/15/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 13.647822856903076,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.3647822856903078,
        "operations_per_second": 732.7175993453047
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/16/17-16:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428574.477961,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/16/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 24.56161904335022,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.456161904335022,
        "operations_per_second": 407.1392843586745
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/16/17-16:06:30",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428590.077237,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/16/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 15.598605871200562,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.5598605871200562,
        "operations_per_second": 641.0829328320185
    },
    {
        "database": "MySQL",
        "dataset": "MouseGenes",
        "date": "2020/16/17-16:06:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428602.64329,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/16/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.565415143966675,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.2565415143966676,
        "operations_per_second": 795.8352259297643
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/26/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429175.308279,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/26/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 120.08435106277466,
        "count_iterations": 1,
        "count_operations": 5713,
        "msecs_per_operation": 21.019490821420383,
        "operations_per_second": 47.57489172767818
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/27/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429235.315282,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/27/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 60.00564908981323,
        "count_iterations": 1,
        "count_operations": 3069,
        "msecs_per_operation": 19.55218282496358,
        "operations_per_second": 51.145184604310934
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/28/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429295.320279,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/28/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00415587425232,
        "count_iterations": 1,
        "count_operations": 1849,
        "msecs_per_operation": 32.45222059180763,
        "operations_per_second": 30.814532311309502
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/29/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429355.352503,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/29/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.031386852264404,
        "count_iterations": 1,
        "count_operations": 1737,
        "msecs_per_operation": 34.5603839103422,
        "operations_per_second": 28.934863761763648
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/30/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429415.381808,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/30/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.02854919433594,
        "count_iterations": 1,
        "count_operations": 1737,
        "msecs_per_operation": 34.55875025580653,
        "operations_per_second": 28.93623156502834
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/31/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429475.383507,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/31/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.000826835632324,
        "count_iterations": 1,
        "count_operations": 2344,
        "msecs_per_operation": 25.59762237015031,
        "operations_per_second": 39.06612831221824
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/32/17-16:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429535.387565,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00339102745056,
        "count_iterations": 1,
        "count_operations": 2444,
        "msecs_per_operation": 24.551305657712994,
        "operations_per_second": 40.73103133257769
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/32/17-16:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429561.560706,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/32/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 26.17245388031006,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.617245388031006,
        "operations_per_second": 382.08110121165043
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/33/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429597.512675,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 35.951366901397705,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 3.5951366901397703,
        "operations_per_second": 278.15354079377784
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/33/17-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429614.31567,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 16.802326917648315,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.6802326917648314,
        "operations_per_second": 595.1556620111054
    },
    {
        "database": "SQLite",
        "dataset": "HumanBrain",
        "date": "2020/33/17-16:06:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429624.275333,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/33/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 9.958865880966187,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.9958865880966186,
        "operations_per_second": 1004.1304019479197
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/36/17-16:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429771.990175,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/36/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 116.9851016998291,
        "count_iterations": 1,
        "count_operations": 17025,
        "msecs_per_operation": 6.871371612324764,
        "operations_per_second": 145.53135187832956
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/37/17-16:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429831.995435,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/37/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 60.003976821899414,
        "count_iterations": 1,
        "count_operations": 8188,
        "msecs_per_operation": 7.328282464814291,
        "operations_per_second": 136.45762220566118
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/38/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429892.011588,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/38/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.01518416404724,
        "count_iterations": 1,
        "count_operations": 4063,
        "msecs_per_operation": 14.771150421867398,
        "operations_per_second": 67.69953398616721
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/39/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592429952.036964,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/39/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.02449417114258,
        "count_iterations": 1,
        "count_operations": 3523,
        "msecs_per_operation": 17.03789218596156,
        "operations_per_second": 58.6927061801667
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/40/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430012.051649,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/40/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.01379680633545,
        "count_iterations": 1,
        "count_operations": 3579,
        "msecs_per_operation": 16.768314279501382,
        "operations_per_second": 59.636286828334406
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/41/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430072.054048,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/41/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.001506090164185,
        "count_iterations": 1,
        "count_operations": 4024,
        "msecs_per_operation": 14.910911056203824,
        "operations_per_second": 67.06498323480648
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/42/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430132.112745,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/42/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.057862997055054,
        "count_iterations": 1,
        "count_operations": 4640,
        "msecs_per_operation": 12.943504956261865,
        "operations_per_second": 77.25882621277289
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/44/17-16:06:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430271.213442,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 139.1000120639801,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 13.91000120639801,
        "operations_per_second": 71.89071986133563
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/44/17-16:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430283.034697,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/44/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 11.82052206993103,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.182052206993103,
        "operations_per_second": 845.9863228408445
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/46/17-16:06:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430404.638124,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 121.60276508331299,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 12.160276508331298,
        "operations_per_second": 82.23497215008852
    },
    {
        "database": "MongoDB",
        "dataset": "HumanBrain",
        "date": "2020/46/17-16:06:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430410.7399,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/46/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 6.101037263870239,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.6101037263870239,
        "operations_per_second": 1639.0655502497987
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/48/17-16:06:39",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430519.908419,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/48/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 43.51984405517578,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 2.1759922027587892,
        "operations_per_second": 459.56047026830777
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/49/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430557.399838,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 37.49023795127869,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.8745118975639343,
        "operations_per_second": 533.4722075114985
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/50/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430617.447753,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/50/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.04708290100098,
        "count_iterations": 1,
        "count_operations": 1463,
        "msecs_per_operation": 41.04380239302869,
        "operations_per_second": 24.364214368448728
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/51/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430677.513361,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/51/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.06486701965332,
        "count_iterations": 1,
        "count_operations": 1452,
        "msecs_per_operation": 41.366988305546364,
        "operations_per_second": 24.17386522349085
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/52/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430737.588559,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/52/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.074410915374756,
        "count_iterations": 1,
        "count_operations": 1472,
        "msecs_per_operation": 40.81142045881437,
        "operations_per_second": 24.502945223608897
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/53/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430797.615678,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/53/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.02626395225525,
        "count_iterations": 1,
        "count_operations": 1827,
        "msecs_per_operation": 32.85509794868924,
        "operations_per_second": 30.436676876195254
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430857.643558,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.026942014694214,
        "count_iterations": 1,
        "count_operations": 2028,
        "msecs_per_operation": 29.599083833675646,
        "operations_per_second": 33.78482947712976
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:29",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430869.333156,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 11.688395023345947,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.1688395023345948,
        "operations_per_second": 855.549455680304
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430891.330802,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 21.99705219268799,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 2.199705219268799,
        "operations_per_second": 454.60636781705176
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/54/17-16:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430899.13064,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/54/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 7.799257040023804,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.7799257040023804,
        "operations_per_second": 1282.1734107085513
    },
    {
        "database": "PostgreSQL",
        "dataset": "HumanBrain",
        "date": "2020/55/17-16:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430912.520089,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/55/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 13.388848066329956,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.3388848066329957,
        "operations_per_second": 746.8902440642244
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/56/17-16:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592430987.667018,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/56/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e.second, e.first)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 36.50671911239624,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.825335955619812,
        "operations_per_second": 547.8443554027508
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/57/17-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431027.401481,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/57/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e.first, e.second)\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 39.73330569267273,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 1.9866652846336363,
        "operations_per_second": 503.3560548597452
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/58/17-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431087.407277,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/58/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.00496578216553,
        "count_iterations": 1,
        "count_operations": 7958,
        "msecs_per_operation": 7.540206808515396,
        "operations_per_second": 132.62235710440567
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/59/17-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431147.410184,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/59/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 60.001996994018555,
        "count_iterations": 1,
        "count_operations": 5448,
        "msecs_per_operation": 11.01358241446743,
        "operations_per_second": 90.79697798296775
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/00/17-17:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431207.421619,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/00/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.neighbors(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 60.01051473617554,
        "count_iterations": 1,
        "count_operations": 5010,
        "msecs_per_operation": 11.978146653927253,
        "operations_per_second": 83.48536955607668
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/01/17-17:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431267.424429,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/01/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_neighbors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.001874923706055,
        "count_iterations": 1,
        "count_operations": 3084,
        "msecs_per_operation": 19.455860870203,
        "operations_per_second": 51.39839386554814
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/02/17-17:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431327.42562,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.number_of_predecessors(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 60.00018906593323,
        "count_iterations": 1,
        "count_operations": 12873,
        "msecs_per_operation": 4.66093288789973,
        "operations_per_second": 214.54932393386412
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/02/17-17:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431340.840244,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 13.413640022277832,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.341364002227783,
        "operations_per_second": 745.5097932695121
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/02/17-17:06:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431373.179876,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/02/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.insert(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 32.338947057724,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 3.2338947057724,
        "operations_per_second": 309.22466282375603
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/03/17-17:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431388.57615,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/03/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 15.395525693893433,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.5395525693893433,
        "operations_per_second": 649.5393661007922
    },
    {
        "database": "MySQL",
        "dataset": "HumanBrain",
        "date": "2020/03/17-17:06:21",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592431401.286281,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/03/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.insert(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 12.709406852722168,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 1.2709406852722167,
        "operations_per_second": 786.8187804419957
    },
    {
        "database": "Parsing in Python",
        "dataset": "CommunitiesFB",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 0.02815389633178711,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.002815389633178711,
        "operations_per_second": 355190.62378266687,
        "benchmark_code": "            func=lambda: export_edges_into_graph(p, g),\n",
        "date": "2020/24/30-19:08:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1598833468.560293,
        "date_readable": "Aug 30, 2020",
        "date_sortable": "2020/24/30",
        "bytes_sent": 0,
        "bytes_sent_per_second": 0.0,
        "bytes_recv": 0,
        "bytes_recv_per_second": 0.0,
        "packets_sent": 0,
        "packets_sent_per_second": 0.0,
        "packets_recv": 0,
        "packets_recv_per_second": 0.0,
        "read_bytes": 286720,
        "read_bytes_per_second": 10184025.565096624,
        "write_bytes": 0,
        "write_bytes_per_second": 0.0,
        "read_requests": 37,
        "read_requests_per_second": 1314.2053079958673,
        "write_requests": 0,
        "write_requests_per_second": 0.0
    },
    {
        "database": "SQLite (In-Memory)",
        "dataset": "CommunitiesFB",
        "date": "2020/00/29-20:06:22",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1593478822.054936,
        "date_readable": "Jun 29, 2020",
        "date_sortable": "2020/00/29",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "        def import_one() -> int:\n            g.add_edges_stream(dataset_path)\n            return g.number_of_edges()\n",
        "time_elapsed": 0.2434251308441162,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.024342513084411623,
        "operations_per_second": 41080.39283094303
    },
    {
        "database": "Parsing in Python",
        "dataset": "MovieRatings",
        "benchmark_name": "Sequential Writes: Import CSV",
        "time_elapsed": 7.117126941680908,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.002531238720568574,
        "operations_per_second": 395063.48882628395,
        "benchmark_code": "            func=lambda: export_edges_into_graph(p, g),\n",
        "date": "2020/24/30-19:08:35",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1598833475.682608,
        "date_readable": "Aug 30, 2020",
        "date_sortable": "2020/24/30",
        "bytes_sent": 8192,
        "bytes_sent_per_second": 1151.0262592092015,
        "bytes_recv": 8192,
        "bytes_recv_per_second": 1151.0262592092015,
        "packets_sent": 26,
        "packets_sent_per_second": 3.653159514091704,
        "packets_recv": 27,
        "packets_recv_per_second": 3.793665649249077,
        "read_bytes": 2011136,
        "read_bytes_per_second": 282576.94663585897,
        "write_bytes": 25911296,
        "write_bytes_per_second": 3640696.0578787043,
        "read_requests": 324,
        "read_requests_per_second": 45.523987790988926,
        "write_requests": 286,
        "write_requests_per_second": 40.18475465500874
    }
]