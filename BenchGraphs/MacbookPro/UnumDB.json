[
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/18/17-15:06:45",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425125.120419,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/18/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 77.40270686149597,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.0046856925481688376,
        "operations_per_second": 213415.62420496382
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/05/17-15:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592424307.946165,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/05/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 22.825397968292236,
        "count_iterations": 1,
        "count_operations": 14461095,
        "msecs_per_operation": 0.001578400388649147,
        "operations_per_second": 633552.8090282825
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/12/17-15:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592424734.764254,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/12/17",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 210.80020689964294,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.002415384726348499,
        "operations_per_second": 414012.7198335678
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425411.24539,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 2.0243966579437256,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.10121983289718628,
        "operations_per_second": 9879.486770302681
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:32",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425412.263968,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 1.0026130676269531,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.05013065338134766,
        "operations_per_second": 19947.87485399252
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425413.671714,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 1.4067718982696533,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.07072404093658707,
        "operations_per_second": 14139.463565106877
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:35",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425415.193101,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 1.5207512378692627,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.07645423748777148,
        "operations_per_second": 13079.719749476875
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425416.355129,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 1.1613690853118896,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.058386661571157294,
        "operations_per_second": 17127.199485130262
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:37",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425417.609527,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 1.2535820007324219,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.06302257305979699,
        "operations_per_second": 15867.330568226427
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425418.794077,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 1.1839709281921387,
        "count_iterations": 1,
        "count_operations": 19891,
        "msecs_per_operation": 0.059522946467856754,
        "operations_per_second": 16800.24359244404
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425421.609615,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.814910888671875,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.2814910888671875,
        "operations_per_second": 3552.5103264345885
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425424.069948,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.459846258163452,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.24598462581634523,
        "operations_per_second": 4065.294717835784
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425424.964485,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8940410614013672,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08940410614013672,
        "operations_per_second": 11185.168592061613
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "PatentCitations",
        "date": "2020/23/17-15:06:45",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592425425.85857,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/23/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8936080932617188,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08936080932617188,
        "operations_per_second": 11190.587994228486
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/47/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426879.152162,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/47/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 0.36337780952453613,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.018168890476226805,
        "operations_per_second": 55039.13413471538
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/47/17-15:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426879.485759,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/47/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.3324117660522461,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.016620588302612305,
        "operations_per_second": 60166.34199662037
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/48/17-15:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426886.756311,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/48/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 7.269836187362671,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 0.5942321552527932,
        "operations_per_second": 1682.8439712667328
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/48/17-15:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426914.036645,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/48/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 27.27962303161621,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 2.229820421090094,
        "operations_per_second": 448.46660768813354
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/48/17-15:06:40",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426920.24582,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/48/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 6.208435297012329,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 0.5074738676648952,
        "operations_per_second": 1970.5448176108623
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/49/17-15:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426940.441971,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 20.195364236831665,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 1.6507572532966868,
        "operations_per_second": 605.7825873567568
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/49/17-15:06:03",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426943.303647,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 2.861095905303955,
        "count_iterations": 1,
        "count_operations": 12234,
        "msecs_per_operation": 0.2338643048311227,
        "operations_per_second": 4275.983890410795
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/49/17-15:06:05",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426945.668214,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.363935947418213,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.2363935947418213,
        "operations_per_second": 4230.233061484411
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/49/17-15:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426948.069647,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.400970935821533,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.24009709358215334,
        "operations_per_second": 4164.9816958647725
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/49/17-15:06:08",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426948.969008,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8988862037658691,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08988862037658692,
        "operations_per_second": 11124.878720026141
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "MouseGenes",
        "date": "2020/49/17-15:06:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592426949.875974,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/49/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.9064300060272217,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.09064300060272217,
        "operations_per_second": 11032.29144391286
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:06",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428866.62949,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 1.1357462406158447,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.056787312030792236,
        "operations_per_second": 17609.56742340194
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428867.180283,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.5495619773864746,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.02747809886932373,
        "operations_per_second": 36392.619618833596
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428871.694891,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 4.513768911361694,
        "count_iterations": 1,
        "count_operations": 19470,
        "msecs_per_operation": 0.2318319933929992,
        "operations_per_second": 4313.468496579807
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428887.078934,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 15.383326768875122,
        "count_iterations": 1,
        "count_operations": 19470,
        "msecs_per_operation": 0.7901040970146441,
        "operations_per_second": 1265.6560113767712
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428891.01911,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 3.9395182132720947,
        "count_iterations": 1,
        "count_operations": 19470,
        "msecs_per_operation": 0.20233786406122728,
        "operations_per_second": 4942.228705633666
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428901.490896,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 10.471069097518921,
        "count_iterations": 1,
        "count_operations": 19470,
        "msecs_per_operation": 0.5378052951987119,
        "operations_per_second": 1859.4089885829653
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428903.525454,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 2.033966302871704,
        "count_iterations": 1,
        "count_operations": 19470,
        "msecs_per_operation": 0.10446668222248096,
        "operations_per_second": 9572.429972173488
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:46",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428906.059649,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.5335259437561035,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.25335259437561036,
        "operations_per_second": 3947.0683237505764
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:48",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428908.599413,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.539276599884033,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.25392765998840333,
        "operations_per_second": 3938.1294658709858
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428909.582561,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.9826607704162598,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.09826607704162597,
        "operations_per_second": 10176.45183470991
    },
    {
        "database": "UnumDB.Graph",
        "dataset": "HumanBrain",
        "date": "2020/21/17-16:06:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592428910.56119,
        "date_readable": "Jun 17, 2020",
        "date_sortable": "2020/21/17",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.9781181812286377,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.09781181812286377,
        "operations_per_second": 10223.713444768771
    }
]