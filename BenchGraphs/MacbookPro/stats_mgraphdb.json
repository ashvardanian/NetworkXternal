[
    {
        "database": "Parsing in Python",
        "dataset": "FB Communities",
        "date": "2020/48/13-16:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592084913.345159,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/48/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 0.01660895347595215,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.0016608953475952149,
        "operations_per_second": 602084.8944202805
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/48/13-16:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592084913.454589,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/48/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 0.0830230712890625,
        "count_iterations": 2,
        "count_operations": 19972,
        "msecs_per_operation": 0.004156973327111081,
        "operations_per_second": 240559.63830178275
    },
    {
        "database": "Parsing in Python",
        "dataset": "Movie Ratings",
        "date": "2020/48/13-16:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592084918.680163,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/48/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 5.2245378494262695,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.0018581307611776965,
        "operations_per_second": 538175.2570342212
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/48/13-16:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592084923.101667,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/48/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 4.393691062927246,
        "count_iterations": 1,
        "count_operations": 2811698,
        "msecs_per_operation": 0.0015626468642532898,
        "operations_per_second": 639939.8500555336
    },
    {
        "database": "Parsing in Python",
        "dataset": "Patent Citations",
        "date": "2020/49/13-16:06:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592084949.627006,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/49/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 26.52440309524536,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.0016056957562274013,
        "operations_per_second": 622782.987450568
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/50/13-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085007.606464,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/50/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 57.949628829956055,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.003508070389108704,
        "operations_per_second": 285056.99403998285
    },
    {
        "database": "Parsing in Python",
        "dataset": "Mouse Genes",
        "date": "2020/50/13-16:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085034.16359,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/50/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 26.555433988571167,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.0018306269947387425,
        "operations_per_second": 546260.9274713087
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/50/13-16:06:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085050.714348,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/50/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 16.513561964035034,
        "count_iterations": 1,
        "count_operations": 14461095,
        "msecs_per_operation": 0.0011419302593638336,
        "operations_per_second": 875710.2211803176
    },
    {
        "database": "Parsing in Python",
        "dataset": "Human Brain",
        "date": "2020/54/13-16:06:07",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085247.676437,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/54/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 196.96123504638672,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.002256815426373213,
        "operations_per_second": 443102.2529862079
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/56/13-16:06:46",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085406.497268,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/56/13",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 158.78710913658142,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.001819409780428354,
        "operations_per_second": 549628.7921265127
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:10",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085730.704613,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 0.08291506767272949,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.008291506767272949,
        "operations_per_second": 120605.34087086043
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:10",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085730.782665,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.07242298126220703,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.0072422981262207035,
        "operations_per_second": 138077.71822862484
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:10",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085730.902745,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 0.1193687915802002,
        "count_iterations": 1,
        "count_operations": 4398,
        "msecs_per_operation": 0.02714160790818558,
        "operations_per_second": 36843.800978291045
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085731.035452,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 0.13200926780700684,
        "count_iterations": 1,
        "count_operations": 4398,
        "msecs_per_operation": 0.030015749842429933,
        "operations_per_second": 33315.8426909066
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085731.161369,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 0.12515878677368164,
        "count_iterations": 1,
        "count_operations": 4398,
        "msecs_per_operation": 0.02845811431870888,
        "operations_per_second": 35139.36267177696
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085731.293249,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 0.13124704360961914,
        "count_iterations": 1,
        "count_operations": 4398,
        "msecs_per_operation": 0.02984243829231904,
        "operations_per_second": 33509.32622209304
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085731.441213,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 0.14742207527160645,
        "count_iterations": 1,
        "count_operations": 4398,
        "msecs_per_operation": 0.03352025358608605,
        "operations_per_second": 29832.70986992446
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085732.953666,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 1.5118739604949951,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.15118739604949952,
        "operations_per_second": 6614.307978904505
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085734.796786,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 1.8427083492279053,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.1842708349227905,
        "operations_per_second": 5426.794752511975
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085735.035613,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.23841309547424316,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.023841309547424316,
        "operations_per_second": 41944.00471210838
    },
    {
        "database": "MGraphDB",
        "dataset": "FB Communities",
        "date": "2020/02/13-17:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085735.239888,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.2038121223449707,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.02038121223449707,
        "operations_per_second": 49064.794993273674
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/02/13-17:06:23",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085743.728107,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 1.3659908771514893,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.06829954385757446,
        "operations_per_second": 14641.386216067669
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/02/13-17:06:24",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085744.666175,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.9368839263916016,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.04684419631958008,
        "operations_per_second": 21347.36164919574
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/02/13-17:06:45",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085765.493673,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 20.826799869537354,
        "count_iterations": 1,
        "count_operations": 9343,
        "msecs_per_operation": 2.2291340971355402,
        "operations_per_second": 448.6046852385462
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/02/13-17:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085779.529371,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/02/13",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 14.035027980804443,
        "count_iterations": 1,
        "count_operations": 9343,
        "msecs_per_operation": 1.5021971508941927,
        "operations_per_second": 665.6915834281428
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/03/13-17:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085780.929766,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/03/13",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 1.399724006652832,
        "count_iterations": 1,
        "count_operations": 9343,
        "msecs_per_operation": 0.14981526347563223,
        "operations_per_second": 6674.887303206272
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/03/13-17:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085792.75879,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/03/13",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 11.828403234481812,
        "count_iterations": 1,
        "count_operations": 9343,
        "msecs_per_operation": 1.2660176853774816,
        "operations_per_second": 789.8783812817238
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/03/13-17:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085813.740107,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/03/13",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 20.980721950531006,
        "count_iterations": 1,
        "count_operations": 9343,
        "msecs_per_operation": 2.2456086857038433,
        "operations_per_second": 445.3135608025889
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/03/13-17:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085816.021228,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/03/13",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.2805089950561523,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.22805089950561525,
        "operations_per_second": 4384.985992898385
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/03/13-17:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085818.178461,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/03/13",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.1567251682281494,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.21567251682281494,
        "operations_per_second": 4636.659388648702
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/03/13-17:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085818.767983,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/03/13",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.58902907371521,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.058902907371521,
        "operations_per_second": 16977.090684041355
    },
    {
        "database": "MGraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/03/13-17:06:39",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085819.359112,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/03/13",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.5906710624694824,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.05906710624694824,
        "operations_per_second": 16929.89657931086
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:25",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085865.523525,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 5.26675009727478,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.263337504863739,
        "operations_per_second": 3797.4081987198847
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085868.044255,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 2.5197038650512695,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.1259851932525635,
        "operations_per_second": 7937.440695870446
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085873.551838,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 5.50689172744751,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.2769509016016652,
        "operations_per_second": 3610.748310320675
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085878.447281,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 4.894737005233765,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.24616460497051726,
        "operations_per_second": 4062.322445258808
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:39",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085879.598116,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 1.150137186050415,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.05784234490295791,
        "operations_per_second": 17288.372414322064
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:44",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085884.157228,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 4.55849289894104,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.2292543200030698,
        "operations_per_second": 4361.967966346761
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:48",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085888.693499,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 4.5356550216674805,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.22810576451757597,
        "operations_per_second": 4383.931296584783
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085891.865328,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 3.1712019443511963,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.31712019443511963,
        "operations_per_second": 3153.3784903899973
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085894.498501,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.6326818466186523,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.2632681846618652,
        "operations_per_second": 3798.408080658792
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:55",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085895.366667,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8676929473876953,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08676929473876953,
        "operations_per_second": 11524.814198509192
    },
    {
        "database": "MGraphDB",
        "dataset": "Patent Citations",
        "date": "2020/04/13-17:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085896.242715,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/04/13",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8755710124969482,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08755710124969483,
        "operations_per_second": 11421.118170052318
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/05/13-17:06:35",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085935.919338,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/05/13",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 2.4357147216796875,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.12178573608398438,
        "operations_per_second": 8211.14222531276
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/05/13-17:06:37",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592085937.021269,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/05/13",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 1.1006968021392822,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.05503484010696411,
        "operations_per_second": 18170.30808223353
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/07/13-17:06:37",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086057.028403,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/07/13",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 120.0063841342926,
        "count_iterations": 1,
        "count_operations": 11744,
        "msecs_per_operation": 10.2185272593914,
        "operations_per_second": 97.86146032746
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/09/13-17:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086176.27314,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/09/13",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 119.24408674240112,
        "count_iterations": 1,
        "count_operations": 12332,
        "msecs_per_operation": 9.669484815309856,
        "operations_per_second": 103.41812610498995
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/09/13-17:06:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086182.614767,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/09/13",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 6.340982913970947,
        "count_iterations": 1,
        "count_operations": 12332,
        "msecs_per_operation": 0.5141893378179491,
        "operations_per_second": 1944.8088990792228
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/11/13-17:06:31",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086291.331491,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/11/13",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 108.71599316596985,
        "count_iterations": 1,
        "count_operations": 12332,
        "msecs_per_operation": 8.815763312193468,
        "operations_per_second": 113.43317244201148
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/13/13-17:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086407.205274,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/13/13",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 115.87320399284363,
        "count_iterations": 1,
        "count_operations": 12332,
        "msecs_per_operation": 9.396140447035648,
        "operations_per_second": 106.42667653137156
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/13/13-17:06:29",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086409.642952,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/13/13",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.437098979949951,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.24370989799499512,
        "operations_per_second": 4103.239171765343
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/13/13-17:06:32",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086412.055201,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/13/13",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.4117679595947266,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.24117679595947267,
        "operations_per_second": 4146.335869591866
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/13/13-17:06:32",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086412.820526,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/13/13",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.7648639678955078,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.07648639678955078,
        "operations_per_second": 13074.22027934535
    },
    {
        "database": "MGraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/13/13-17:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086413.582249,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/13/13",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.7612237930297852,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.07612237930297851,
        "operations_per_second": 13136.741246878919
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/17/13-17:06:46",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086666.86242,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/17/13",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 5.241022825241089,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.2620511412620544,
        "operations_per_second": 3816.0490169359246
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/17/13-17:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086669.711155,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/17/13",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 2.847217082977295,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.14236085414886473,
        "operations_per_second": 7024.402922971465
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/18/13-17:06:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086731.365625,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/18/13",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 61.65375804901123,
        "count_iterations": 1,
        "count_operations": 19502,
        "msecs_per_operation": 3.161406935135434,
        "operations_per_second": 316.314862501926
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/19/13-17:06:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086793.103817,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/19/13",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 61.73753905296326,
        "count_iterations": 1,
        "count_operations": 19502,
        "msecs_per_operation": 3.1657029562590124,
        "operations_per_second": 315.8856070254059
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/19/13-17:06:57",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086797.027233,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/19/13",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 3.922753095626831,
        "count_iterations": 1,
        "count_operations": 19502,
        "msecs_per_operation": 0.20114619503778233,
        "operations_per_second": 4971.508408658512
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/20/13-17:06:53",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086853.625906,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/20/13",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 56.59793305397034,
        "count_iterations": 1,
        "count_operations": 19502,
        "msecs_per_operation": 2.9021604478499814,
        "operations_per_second": 344.57088709235006
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/21/13-17:06:51",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086911.197929,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/21/13",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 57.57136368751526,
        "count_iterations": 1,
        "count_operations": 19502,
        "msecs_per_operation": 2.9520748480932855,
        "operations_per_second": 338.7447986442111
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/21/13-17:06:54",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086914.192672,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/21/13",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.994135856628418,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.2994135856628418,
        "operations_per_second": 3339.861809497388
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/21/13-17:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086916.68764,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/21/13",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.4944369792938232,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.24944369792938234,
        "operations_per_second": 4008.9206835087116
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/21/13-17:06:57",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086917.495433,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/21/13",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8072538375854492,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08072538375854492,
        "operations_per_second": 12387.677251446306
    },
    {
        "database": "MGraphDB",
        "dataset": "Human Brain",
        "date": "2020/21/13-17:06:58",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592086918.310292,
        "date_readable": "Jun 13, 2020",
        "date_sortable": "2020/21/13",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8143599033355713,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08143599033355713,
        "operations_per_second": 12279.582969447018
    }
]