[
    {
        "database": "Parsing in Python",
        "dataset": "FB Communities",
        "date": "2020/32/14-06:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134340.158695,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/32/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 0.019026994705200195,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.0019026994705200195,
        "operations_per_second": 525569.0746193847
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/32/14-06:06:20",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134340.288851,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/32/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 0.10730600357055664,
        "count_iterations": 2,
        "count_operations": 19972,
        "msecs_per_operation": 0.005372822129509144,
        "operations_per_second": 186121.92547892124
    },
    {
        "database": "Parsing in Python",
        "dataset": "Movie Ratings",
        "date": "2020/32/14-06:06:25",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134345.383111,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/32/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 5.090813875198364,
        "count_iterations": 1,
        "count_operations": 2811717,
        "msecs_per_operation": 0.0018105712186533582,
        "operations_per_second": 552311.8835081042
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/32/14-06:06:32",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134352.590692,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/32/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 7.181895971298218,
        "count_iterations": 1,
        "count_operations": 2811458,
        "msecs_per_operation": 0.00255450942937729,
        "operations_per_second": 391464.595315183
    },
    {
        "database": "Parsing in Python",
        "dataset": "Patent Citations",
        "date": "2020/32/14-06:06:59",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134379.535274,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/32/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 26.942111015319824,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.0016309823510735778,
        "operations_per_second": 613127.4193995785
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/34/14-06:06:09",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134449.684509,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/34/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 70.12637495994568,
        "count_iterations": 1,
        "count_operations": 16518947,
        "msecs_per_operation": 0.004245208545069228,
        "operations_per_second": 235559.68791250343
    },
    {
        "database": "Parsing in Python",
        "dataset": "Mouse Genes",
        "date": "2020/34/14-06:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134476.766533,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/34/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 27.07789707183838,
        "count_iterations": 1,
        "count_operations": 14506196,
        "msecs_per_operation": 0.0018666435412728727,
        "operations_per_second": 535720.9225485523
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/34/14-06:06:57",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134497.614991,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/34/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 20.810288190841675,
        "count_iterations": 1,
        "count_operations": 14461095,
        "msecs_per_operation": 0.001439053418212222,
        "operations_per_second": 694901.2367048396
    },
    {
        "database": "Parsing in Python",
        "dataset": "Human Brain",
        "date": "2020/38/14-06:06:05",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134685.569299,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/38/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "            func=lambda: export_edges_into_graph(dataset_path, g),\n",
        "time_elapsed": 187.95067691802979,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.0021535709144289246,
        "operations_per_second": 464345.0528143746
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/41/14-06:06:23",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134883.610826,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/41/14",
        "benchmark_name": "Sequential Writes: Import CSV",
        "benchmark_code": "                def import_one() -> int:\n                    g.insert_adjacency_list(dataset_path)\n                    return g.count_edges()\n",
        "time_elapsed": 198.01265406608582,
        "count_iterations": 1,
        "count_operations": 87273967,
        "msecs_per_operation": 0.002268862764838979,
        "operations_per_second": 440749.4430677784
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133600.112671,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 0.12969088554382324,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.012969088554382323,
        "operations_per_second": 77106.42084112338
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133600.238311,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.11802911758422852,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.011802911758422852,
        "operations_per_second": 84724.85607514392
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133600.389119,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 0.14989185333251953,
        "count_iterations": 1,
        "count_operations": 4413,
        "msecs_per_operation": 0.03396597628201213,
        "operations_per_second": 29441.226470195263
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133600.544285,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 0.15446209907531738,
        "count_iterations": 1,
        "count_operations": 4413,
        "msecs_per_operation": 0.03500160867331008,
        "operations_per_second": 28570.115429081237
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133600.683753,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 0.1387178897857666,
        "count_iterations": 1,
        "count_operations": 4413,
        "msecs_per_operation": 0.031433920187121364,
        "operations_per_second": 31812.76767412882
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133600.825947,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 0.1415269374847412,
        "count_iterations": 1,
        "count_operations": 4413,
        "msecs_per_operation": 0.03207045943456633,
        "operations_per_second": 31181.34313106146
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:00",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133600.962031,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 0.13547897338867188,
        "count_iterations": 1,
        "count_operations": 4413,
        "msecs_per_operation": 0.030699971309465644,
        "operations_per_second": 32573.320343516825
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:02",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133602.686635,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 1.724005937576294,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.1724005937576294,
        "operations_per_second": 5800.444059988895
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:04",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133604.344898,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 1.657735824584961,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.1657735824584961,
        "operations_per_second": 6032.324241109798
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:04",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133604.737198,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.3918342590332031,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.03918342590332031,
        "operations_per_second": 25520.99457733384
    },
    {
        "database": "GraphDB",
        "dataset": "FB Communities",
        "date": "2020/20/14-06:06:05",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133605.058902,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.3211851119995117,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.03211851119995117,
        "operations_per_second": 31134.693441255156
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:13",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133613.846317,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 0.3799629211425781,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.018998146057128906,
        "operations_per_second": 52636.715024346166
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:14",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133614.196272,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.34867310523986816,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.01743365526199341,
        "operations_per_second": 57360.31744186603
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133615.509877,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 1.3128290176391602,
        "count_iterations": 1,
        "count_operations": 9098,
        "msecs_per_operation": 0.14429863900188614,
        "operations_per_second": 6930.072292552453
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133627.284756,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 11.772682905197144,
        "count_iterations": 1,
        "count_operations": 9098,
        "msecs_per_operation": 1.2939858106393871,
        "operations_per_second": 772.8060012542779
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133628.734963,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 1.4495470523834229,
        "count_iterations": 1,
        "count_operations": 9098,
        "msecs_per_operation": 0.15932590155896054,
        "operations_per_second": 6276.443379358111
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:37",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133637.484713,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 8.749042987823486,
        "count_iterations": 1,
        "count_operations": 9098,
        "msecs_per_operation": 0.9616446458368307,
        "operations_per_second": 1039.8851637444434
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133638.153253,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 0.6678798198699951,
        "count_iterations": 1,
        "count_operations": 9098,
        "msecs_per_operation": 0.07340952075950705,
        "operations_per_second": 13622.211256167246
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:40",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133640.400999,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.2471132278442383,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.22471132278442382,
        "operations_per_second": 4450.154035893185
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133642.502042,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.100569009780884,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.21005690097808838,
        "operations_per_second": 4760.614839806252
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133643.225438,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.7228760719299316,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.07228760719299315,
        "operations_per_second": 13833.629841007241
    },
    {
        "database": "GraphDB",
        "dataset": "Movie Ratings",
        "date": "2020/20/14-06:06:43",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133643.841047,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/20/14",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.6150667667388916,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.06150667667388917,
        "operations_per_second": 16258.39752815844
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133693.780055,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 1.8391828536987305,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.09195914268493653,
        "operations_per_second": 10874.394549611283
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:34",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133694.66922,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.8877651691436768,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.04438825845718384,
        "operations_per_second": 22528.480160233885
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:36",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133696.233016,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 1.5629518032073975,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.07860349040471723,
        "operations_per_second": 12722.08135861594
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:38",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133698.53195,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 2.298063039779663,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.11557347816232463,
        "operations_per_second": 8652.504154936702
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:40",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133700.070593,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 1.5379040241241455,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.07734379521847443,
        "operations_per_second": 12929.285370278014
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133701.523355,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 1.4519920349121094,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.07302313593402279,
        "operations_per_second": 13694.289997399055
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:42",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133702.914797,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 1.390679121017456,
        "count_iterations": 1,
        "count_operations": 19884,
        "msecs_per_operation": 0.06993960576430577,
        "operations_per_second": 14298.050283125242
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:46",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133706.051208,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 3.135632276535034,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.3135632276535034,
        "operations_per_second": 3189.1494659094064
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133709.026085,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.97432017326355,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.29743201732635494,
        "operations_per_second": 3362.1128249375984
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:49",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133709.976197,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.9496340751647949,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.0949634075164795,
        "operations_per_second": 10530.371920641799
    },
    {
        "database": "GraphDB",
        "dataset": "Patent Citations",
        "date": "2020/21/14-06:06:50",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133710.879786,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/21/14",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.903083086013794,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.0903083086013794,
        "operations_per_second": 11073.178265512612
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/22/14-06:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133753.014044,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/22/14",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 0.4162561893463135,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.020812809467315674,
        "operations_per_second": 48047.33361780853
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/22/14-06:06:33",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133753.40329,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/22/14",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.38795018196105957,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.01939750909805298,
        "operations_per_second": 51553.01100492201
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/22/14-06:06:41",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133761.142025,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/22/14",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 7.737917184829712,
        "count_iterations": 1,
        "count_operations": 12283,
        "msecs_per_operation": 0.6299696478734602,
        "operations_per_second": 1587.378063968038
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/22/14-06:06:56",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133776.086052,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/22/14",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 14.943304061889648,
        "count_iterations": 1,
        "count_operations": 12283,
        "msecs_per_operation": 1.216584227134222,
        "operations_per_second": 821.9735039271335
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/23/14-06:06:02",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133782.936316,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/23/14",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 6.849544286727905,
        "count_iterations": 1,
        "count_operations": 12283,
        "msecs_per_operation": 0.5576442470673211,
        "operations_per_second": 1793.2579870751824
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/23/14-06:06:10",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133790.016735,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/23/14",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 7.079649209976196,
        "count_iterations": 1,
        "count_operations": 12283,
        "msecs_per_operation": 0.5763778563849382,
        "operations_per_second": 1734.972967684835
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/23/14-06:06:12",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133792.946889,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/23/14",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 2.9295449256896973,
        "count_iterations": 1,
        "count_operations": 12283,
        "msecs_per_operation": 0.23850402391025788,
        "operations_per_second": 4192.801377540997
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/23/14-06:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133795.298022,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/23/14",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.350440263748169,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.2350440263748169,
        "operations_per_second": 4254.5220800690895
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/23/14-06:06:17",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133797.741247,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/23/14",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.44272780418396,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.244272780418396,
        "operations_per_second": 4093.7839995400927
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/23/14-06:06:18",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133798.768134,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/23/14",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 1.0262720584869385,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.10262720584869385,
        "operations_per_second": 9744.004932515925
    },
    {
        "database": "GraphDB",
        "dataset": "Mouse Genes",
        "date": "2020/23/14-06:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592133799.832001,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/23/14",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 1.0628900527954102,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.10628900527954102,
        "operations_per_second": 9408.310834878841
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/27/14-06:06:57",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134077.919912,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/27/14",
        "benchmark_name": "Random Reads: Find Directed Edge",
        "benchmark_code": "    def find_e_directed(self) -> int:\n        # Try both existing and potentially missing edges\n        half = int(len(self.tasks.edges_to_query) / 2)\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query[:half]:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        t0 = time()\n        for e in self.tasks.edges_to_query[half:]:\n            match = self.graph.edge_directed(e['v2'], e['v1'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} directed matches')\n        return cnt\n",
        "time_elapsed": 1.0349512100219727,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.05174756050109863,
        "operations_per_second": 19324.582459858553
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/27/14-06:06:58",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134078.454562,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/27/14",
        "benchmark_name": "Random Reads: Find Any Relation",
        "benchmark_code": "    def find_e_undirected(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for e in self.tasks.edges_to_query:\n            match = self.graph.edge_directed(e['v1'], e['v2'])\n            cnt += 1\n            cnt_found += 0 if (match is None) else 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} undirected matches')\n        return cnt\n",
        "time_elapsed": 0.5333819389343262,
        "count_iterations": 1,
        "count_operations": 20000,
        "msecs_per_operation": 0.02666909694671631,
        "operations_per_second": 37496.582730114795
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:03",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134083.106126,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Reads: Find Ingoing Edges",
        "benchmark_code": "    def find_es_to(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_to(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 4.6506969928741455,
        "count_iterations": 1,
        "count_operations": 19469,
        "msecs_per_operation": 0.238877034920856,
        "operations_per_second": 4186.254238844336
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:11",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134091.786213,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Reads: Find Connected Edges",
        "benchmark_code": "    def find_es_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            es = self.graph.edges_related(v)\n            cnt += 1\n            cnt_found += len(es)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} edges found')\n        return cnt\n",
        "time_elapsed": 8.679276943206787,
        "count_iterations": 1,
        "count_operations": 19469,
        "msecs_per_operation": 0.4457998327190296,
        "operations_per_second": 2243.1592086986298
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:15",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134095.847286,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Reads: Find Friends",
        "benchmark_code": "    def find_vs_related(self) -> int:\n        cnt = 0\n        cnt_found = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            vs = self.graph.nodes_related(v)\n            cnt += 1\n            cnt_found += len(vs)\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        print(f'---- {cnt} ops: {cnt_found} related nodes')\n        return cnt\n",
        "time_elapsed": 4.060286998748779,
        "count_iterations": 1,
        "count_operations": 19469,
        "msecs_per_operation": 0.20855138932399092,
        "operations_per_second": 4794.981242951441
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:19",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134099.698958,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Reads: Count Friends",
        "benchmark_code": "    def count_v_related(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_related(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 3.850842237472534,
        "count_iterations": 1,
        "count_operations": 19469,
        "msecs_per_operation": 0.19779353009772122,
        "operations_per_second": 5055.777100019112
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:21",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134101.773116,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Reads: Count Followers",
        "benchmark_code": "    def count_v_followers(self) -> int:\n        cnt = 0\n        t0 = time()\n        for v in self.tasks.nodes_to_query:\n            self.graph.count_followers(v)\n            cnt += 1\n            dt = time() - t0\n            if dt > self.max_seconds_per_query:\n                break\n        return cnt\n",
        "time_elapsed": 2.07346510887146,
        "count_iterations": 1,
        "count_operations": 19469,
        "msecs_per_operation": 0.10650085309319739,
        "operations_per_second": 9389.596148351171
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:24",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134104.26466,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Writes: Remove Edge",
        "benchmark_code": "    def remove_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.remove_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.4908108711242676,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.24908108711242677,
        "operations_per_second": 4014.756847229569
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:26",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134106.646508,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Writes: Upsert Edge",
        "benchmark_code": "    def upsert_e(self) -> int:\n        cnt = 0\n        for e in self.tasks.edges_to_change_by_one:\n            self.graph.upsert_edge(e)\n            cnt += 1\n        return cnt\n",
        "time_elapsed": 2.381330966949463,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.23813309669494628,
        "operations_per_second": 4199.332280472638
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:27",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134107.497745,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Writes: Remove Edges Batch",
        "benchmark_code": "    def remove_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.remove_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8506169319152832,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08506169319152833,
        "operations_per_second": 11756.173225336108
    },
    {
        "database": "GraphDB",
        "dataset": "Human Brain",
        "date": "2020/28/14-06:06:28",
        "num_cpus": 16,
        "mhz_per_cpu": 2300,
        "build_type": "debug",
        "cpu_scaling_enabled": false,
        "device_name": "MacbookPro",
        "date_utc": 1592134108.37689,
        "date_readable": "Jun 14, 2020",
        "date_sortable": "2020/28/14",
        "benchmark_name": "Random Writes: Upsert Edges Batch",
        "benchmark_code": "    def upsert_es(self) -> int:\n        cnt = 0\n        for es in self.tasks.edges_to_change_batched:\n            self.graph.upsert_edges(es)\n            cnt += len(es)\n        return cnt\n",
        "time_elapsed": 0.8785960674285889,
        "count_iterations": 1,
        "count_operations": 10000,
        "msecs_per_operation": 0.08785960674285889,
        "operations_per_second": 11381.794627498475
    }
]